{"docstore/data":{"react":{"__data__":"{\"id_\":\"react\",\"metadata\":{\"name\":\"react\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"text\":\"Sure, here are some usage examples based on the provided README and TypeScript definition for the React library:\\n\\n### Example 1: Basic Counter Component\\n\\nThis example demonstrates a simple counter component using React's `useState` hook.\\n\\n```tsx\\nimport React, { useState } from 'react';\\nimport { createRoot } from 'react-dom/client';\\n\\nfunction Counter() {\\n  const [count, setCount] = useState(0);\\n\\n  return (\\n    <>\\n      <h1>{count}</h1>\\n      <button onClick={() => setCount(count + 1)}>Increment</button>\\n    </>\\n  );\\n}\\n\\nconst root = createRoot(document.getElementById('root'));\\nroot.render(<Counter />);\\n```\\n\\n### Example 2: Using Context API\\n\\nThis example demonstrates how to use React's Context API to pass data through the component tree without having to pass props down manually at every level.\\n\\n```tsx\\nimport React, { createContext, useContext } from 'react';\\nimport { createRoot } from 'react-dom/client';\\n\\nconst ThemeContext = createContext('light');\\n\\nfunction ThemedButton() {\\n  const theme = useContext(ThemeContext);\\n  return <button style={{ background: theme === 'dark' ? '#333' : '#FFF' }}>Themed Button</button>;\\n}\\n\\nfunction App() {\\n  return (\\n    <ThemeContext.Provider value=\\\"dark\\\">\\n      <ThemedButton />\\n    </ThemeContext.Provider>\\n  );\\n}\\n\\nconst root = createRoot(document.getElementById('root'));\\nroot.render(<App />);\\n```\\n\\n### Example 3: Using `useEffect` Hook\\n\\nThis example demonstrates how to use the `useEffect` hook to perform side effects in a functional component.\\n\\n```tsx\\nimport React, { useState, useEffect } from 'react';\\nimport { createRoot } from 'react-dom/client';\\n\\nfunction Timer() {\\n  const [seconds, setSeconds] = useState(0);\\n\\n  useEffect(() => {\\n    const interval = setInterval(() => {\\n      setSeconds(prevSeconds => prevSeconds + 1);\\n    }, 1000);\\n\\n    return () => clearInterval(interval);\\n  }, []);\\n\\n  return <h1>{seconds} seconds have passed.</h1>;\\n}\\n\\nconst root = createRoot(document.getElementById('root'));\\nroot.render(<Timer />);\\n```\\n\\n### Example 4: Using `useRef` Hook\\n\\nThis example demonstrates how to use the `useRef` hook to access a DOM element directly.\\n\\n```tsx\\nimport React, { useRef } from 'react';\\nimport { createRoot } from 'react-dom/client';\\n\\nfunction TextInputWithFocusButton() {\\n  const inputEl = useRef<HTMLInputElement>(null);\\n\\n  const onButtonClick = () => {\\n    if (inputEl.current) {\\n      inputEl.current.focus();\\n    }\\n  };\\n\\n  return (\\n    <>\\n      <input ref={inputEl} type=\\\"text\\\" />\\n      <button onClick={onButtonClick}>Focus the input</button>\\n    </>\\n  );\\n}\\n\\nconst root = createRoot(document.getElementById('root'));\\nroot.render(<TextInputWithFocusButton />);\\n```\\n\\n### Example 5: Using `useReducer` Hook\\n\\nThis example demonstrates how to use the `useReducer` hook for more complex state management.\\n\\n```tsx\\nimport React, { useReducer } from 'react';\\nimport { createRoot } from 'react-dom/client';\\n\\ntype Action = { type: 'increment' } | { type: 'decrement' };\\n\\nfunction counterReducer(state: number, action: Action): number {\\n  switch (action.type) {\\n    case 'increment':\\n      return state + 1;\\n    case 'decrement':\\n      return state - 1;\\n    default:\\n      throw new Error();\\n  }\\n}\\n\\nfunction Counter() {\\n  const [count, dispatch] = useReducer(counterReducer, 0);\\n\\n  return (\\n    <>\\n      <h1>{count}</h1>\\n      <button onClick={() => dispatch({ type: 'increment' })}>Increment</button>\\n      <button onClick={() => dispatch({ type: 'decrement' })}>Decrement</button>\\n    </>\\n  );\\n}\\n\\nconst root = createRoot(document.getElementById('root'));\\nroot.render(<Counter />);\\n```\\n\\nThese examples cover basic usage of React hooks (`useState`, `useEffect`, `useContext`, `useRef`, `useReducer`) and the Context API, which are fundamental concepts in modern React development.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\",\"hash\":\"Xa8FVhpjEOUOZedREf3qzfhatVe9lfjduD55EkiQrIo=\"}","__type__":"DOCUMENT"},"react-dom":{"__data__":"{\"id_\":\"react-dom\",\"metadata\":{\"name\":\"react-dom\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"text\":\"Sure! Here are some usage examples based on the provided README and TypeScript definitions for the `react-dom` library.\\n\\n### Browser Usage Example\\n\\n```js\\nimport { createRoot } from 'react-dom/client';\\nimport React from 'react';\\n\\nfunction App() {\\n  return <div>Hello World</div>;\\n}\\n\\nconst root = createRoot(document.getElementById('root'));\\nroot.render(<App />);\\n```\\n\\n### Server-Side Rendering Example\\n\\n```js\\nimport { renderToPipeableStream } from 'react-dom/server';\\nimport React from 'react';\\n\\nfunction App() {\\n  return <div>Hello World</div>;\\n}\\n\\nfunction handleRequest(res) {\\n  const stream = renderToPipeableStream(<App />, {\\n    onShellReady() {\\n      res.statusCode = 200;\\n      res.setHeader('Content-type', 'text/html');\\n      stream.pipe(res);\\n    },\\n    // Add other options as needed\\n  });\\n}\\n```\\n\\n### Using `createPortal`\\n\\n```js\\nimport React, { useState } from 'react';\\nimport ReactDOM from 'react-dom';\\n\\nfunction Modal({ children }) {\\n  return ReactDOM.createPortal(\\n    <div className=\\\"modal\\\">\\n      {children}\\n    </div>,\\n    document.getElementById('modal-root')\\n  );\\n}\\n\\nfunction App() {\\n  const [showModal, setShowModal] = useState(false);\\n\\n  return (\\n    <div>\\n      <button onClick={() => setShowModal(true)}>Show Modal</button>\\n      {showModal && <Modal>Modal Content</Modal>}\\n    </div>\\n  );\\n}\\n\\nconst root = createRoot(document.getElementById('root'));\\nroot.render(<App />);\\n```\\n\\n### Using `flushSync`\\n\\n```js\\nimport React, { useState } from 'react';\\nimport { flushSync } from 'react-dom';\\n\\nfunction App() {\\n  const [count, setCount] = useState(0);\\n\\n  const handleClick = () => {\\n    flushSync(() => {\\n      setCount(count + 1);\\n    });\\n    // Do something immediately after state update\\n    console.log('Count updated:', count + 1);\\n  };\\n\\n  return (\\n    <div>\\n      <p>Count: {count}</p>\\n      <button onClick={handleClick}>Increment</button>\\n    </div>\\n  );\\n}\\n\\nconst root = createRoot(document.getElementById('root'));\\nroot.render(<App />);\\n```\\n\\n### Using `unstable_batchedUpdates`\\n\\n```js\\nimport React, { useState } from 'react';\\nimport { unstable_batchedUpdates } from 'react-dom';\\n\\nfunction App() {\\n  const [count1, setCount1] = useState(0);\\n  const [count2, setCount2] = useState(0);\\n\\n  const handleClick = () => {\\n    unstable_batchedUpdates(() => {\\n      setCount1(count1 + 1);\\n      setCount2(count2 + 1);\\n    });\\n    // Both state updates will be batched together\\n  };\\n\\n  return (\\n    <div>\\n      <p>Count1: {count1}</p>\\n      <p>Count2: {count2}</p>\\n      <button onClick={handleClick}>Increment Both</button>\\n    </div>\\n  );\\n}\\n\\nconst root = createRoot(document.getElementById('root'));\\nroot.render(<App />);\\n```\\n\\n### Deprecated API Usage (for reference)\\n\\n```js\\nimport React from 'react';\\nimport ReactDOM from 'react-dom';\\n\\nfunction App() {\\n  return <div>Hello World</div>;\\n}\\n\\n// Deprecated: Use createRoot instead\\nReactDOM.render(<App />, document.getElementById('root'));\\n\\n// Deprecated: Use createRoot and root.unmount() instead\\nReactDOM.unmountComponentAtNode(document.getElementById('root'));\\n```\\n\\nThese examples cover various use cases, including client-side rendering, server-side rendering, portals, and some of the deprecated APIs. For more detailed information, you can refer to the official React documentation.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\",\"hash\":\"SCYJ90Oz/7oPppF/JwRgyCHCgdvzfh+AtprrTkDAFqI=\"}","__type__":"DOCUMENT"},"react-states":{"__data__":"{\"id_\":\"react-states\",\"metadata\":{\"name\":\"react-states\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"text\":\"Sure! Here are some usage examples based on the provided README and TypeScript definitions of the \\\"react-states\\\" library.\\n\\n### Example 1: Basic Usage with `createTransitionsHook`\\n\\nThis example demonstrates how to use `createTransitionsHook` to manage state transitions and effects in a React component.\\n\\n```tsx\\nimport React from \\\"react\\\";\\nimport { createTransitionsHook } from \\\"react-states\\\";\\n\\ntype State =\\n  | { status: \\\"NOT_LOADED\\\" }\\n  | { status: \\\"LOADING\\\" }\\n  | { status: \\\"LOADED\\\"; data: string }\\n  | { status: \\\"ERROR\\\"; error: string };\\n\\ntype Action = \\n  | { type: \\\"FETCH\\\" }\\n  | { type: \\\"FETCH_SUCCESS\\\"; data: string }\\n  | { type: \\\"FETCH_ERROR\\\"; error: string };\\n\\ntype Effect = { type: \\\"FETCH_DATA\\\" };\\n\\nconst useData = createTransitionsHook<State, Action, Effect>((transition) => ({\\n  NOT_LOADED: {\\n    FETCH: () =>\\n      transition(\\n        { status: \\\"LOADING\\\" },\\n        { type: \\\"FETCH_DATA\\\" }\\n      ),\\n  },\\n  LOADING: {\\n    FETCH_SUCCESS: ({ data }) =>\\n      transition({ status: \\\"LOADED\\\", data }),\\n    FETCH_ERROR: ({ error }) =>\\n      transition({ status: \\\"ERROR\\\", error }),\\n  },\\n  LOADED: {},\\n  ERROR: {},\\n}));\\n\\nconst DataComponent = () => {\\n  const [state, dispatch] = useData(\\n    {\\n      FETCH_DATA: async () => {\\n        try {\\n          const newData = await Promise.resolve(\\\"Some data\\\");\\n          dispatch({ type: \\\"FETCH_SUCCESS\\\", data: newData });\\n        } catch (error) {\\n          dispatch({ type: \\\"FETCH_ERROR\\\", error: \\\"Failed to fetch data\\\" });\\n        }\\n      },\\n    },\\n    { status: \\\"NOT_LOADED\\\" }\\n  );\\n\\n  return (\\n    <div>\\n      {state.status === \\\"NOT_LOADED\\\" && (\\n        <button onClick={() => dispatch({ type: \\\"FETCH\\\" })}>Load data</button>\\n      )}\\n      {state.status === \\\"LOADING\\\" && <p>Loading...</p>}\\n      {state.status === \\\"LOADED\\\" && <p>Data: {state.data}</p>}\\n      {state.status === \\\"ERROR\\\" && <p style={{ color: \\\"red\\\" }}>{state.error}</p>}\\n    </div>\\n  );\\n};\\n\\nexport default DataComponent;\\n```\\n\\n### Example 2: Using `match` for Exhaustive Matching\\n\\nThis example shows how to use the `match` function to render different UI based on the state.\\n\\n```tsx\\nimport React from \\\"react\\\";\\nimport { match } from \\\"react-states\\\";\\nimport { useData } from \\\"./useData\\\"; // Assuming useData is defined as in Example 1\\n\\nconst DataComponent = () => {\\n  const [state, dispatch] = useData(\\n    {\\n      FETCH_DATA: async () => {\\n        try {\\n          const newData = await Promise.resolve(\\\"Some data\\\");\\n          dispatch({ type: \\\"FETCH_SUCCESS\\\", data: newData });\\n        } catch (error) {\\n          dispatch({ type: \\\"FETCH_ERROR\\\", error: \\\"Failed to fetch data\\\" });\\n        }\\n      },\\n    },\\n    { status: \\\"NOT_LOADED\\\" }\\n  );\\n\\n  return match(state, {\\n    NOT_LOADED: () => (\\n      <button onClick={() => dispatch({ type: \\\"FETCH\\\" })}>Load data</button>\\n    ),\\n    LOADING: () => <p>Loading...</p>,\\n    LOADED: ({ data }) => <p>Data: {data}</p>,\\n    ERROR: ({ error }) => <p style={{ color: \\\"red\\\" }}>{error}</p>,\\n  });\\n};\\n\\nexport default DataComponent;\\n```\\n\\n### Example 3: Using `match` for Partial Matching\\n\\nThis example demonstrates how to use `match` with a default case for unmatched states.\\n\\n```tsx\\nimport React from \\\"react\\\";\\nimport { match } from \\\"react-states\\\";\\nimport { useData } from \\\"./useData\\\"; // Assuming useData is defined as in Example 1\\n\\nconst DataComponent = () => {\\n  const [state, dispatch] = useData(\\n    {\\n      FETCH_DATA: async () => {\\n        try {\\n          const newData = await Promise.resolve(\\\"Some data\\\");\\n          dispatch({ type: \\\"FETCH_SUCCESS\\\", data: newData });\\n        } catch (error) {\\n          dispatch({ type: \\\"FETCH_ERROR\\\", error: \\\"Failed to fetch data\\\" });\\n        }\\n      },\\n    },\\n    { status: \\\"NOT_LOADED\\\" }\\n  );\\n\\n  const dataWithDefault = match(\\n    state,\\n    {\\n      LOADED: ({ data }) => data,\\n    },\\n    () => \\\"No data yet\\\"\\n  );\\n\\n  return <div>Data: {dataWithDefault}</div>;\\n};\\n\\nexport default DataComponent;\\n```\\n\\n### Example 4: Debugging\\n\\nThis example shows how to enable debugging based on the environment.\\n\\n```ts\\nimport { debugging } from \\\"react-states\\\";\\n\\ndebugging.active = Boolean(import.meta.env.DEV); // Enable debugging in development mode\\n```\\n\\nThese examples should help you get started with the \\\"react-states\\\" library and understand how to manage state transitions and effects in a type-safe manner.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\",\"hash\":\"M5w4zytZbxsKWHVjSaWzo+N3hkDAIAPtdCL/W9mdbC0=\"}","__type__":"DOCUMENT"},"bf5f22b7-298b-44b1-af16-c21b101e8787":{"__data__":"{\"id_\":\"bf5f22b7-298b-44b1-af16-c21b101e8787\",\"metadata\":{\"name\":\"react\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"react\",\"metadata\":{\"name\":\"react\"},\"hash\":\"Xa8FVhpjEOUOZedREf3qzfhatVe9lfjduD55EkiQrIo=\"}},\"text\":\"Sure, here are some usage examples based on the provided README and TypeScript definition for the React library:\\n\\n### Example 1: Basic Counter Component\\n\\nThis example demonstrates a simple counter component using React's `useState` hook. ```tsx\\nimport React, { useState } from 'react';\\nimport { createRoot } from 'react-dom/client';\\n\\nfunction Counter() {\\n  const [count, setCount] = useState(0);\\n\\n  return (\\n    <>\\n      <h1>{count}</h1>\\n      <button onClick={() => setCount(count + 1)}>Increment</button>\\n    </>\\n  );\\n}\\n\\nconst root = createRoot(document.getElementById('root'));\\nroot.render(<Counter />);\\n```\\n\\n### Example 2: Using Context API\\n\\nThis example demonstrates how to use React's Context API to pass data through the component tree without having to pass props down manually at every level. ```tsx\\nimport React, { createContext, useContext } from 'react';\\nimport { createRoot } from 'react-dom/client';\\n\\nconst ThemeContext = createContext('light');\\n\\nfunction ThemedButton() {\\n  const theme = useContext(ThemeContext);\\n  return <button style={{ background: theme === 'dark' ? '#333' : '#FFF' }}>Themed Button</button>;\\n}\\n\\nfunction App() {\\n  return (\\n    <ThemeContext.Provider value=\\\"dark\\\">\\n      <ThemedButton />\\n    </ThemeContext.Provider>\\n  );\\n}\\n\\nconst root = createRoot(document.getElementById('root'));\\nroot.render(<App />);\\n```\\n\\n### Example 3: Using `useEffect` Hook\\n\\nThis example demonstrates how to use the `useEffect` hook to perform side effects in a functional component. ```tsx\\nimport React, { useState, useEffect } from 'react';\\nimport { createRoot } from 'react-dom/client';\\n\\nfunction Timer() {\\n  const [seconds, setSeconds] = useState(0);\\n\\n  useEffect(() => {\\n    const interval = setInterval(() => {\\n      setSeconds(prevSeconds => prevSeconds + 1);\\n    }, 1000);\\n\\n    return () => clearInterval(interval);\\n  }, []);\\n\\n  return <h1>{seconds} seconds have passed.</h1>;\\n}\\n\\nconst root = createRoot(document.getElementById('root'));\\nroot.render(<Timer />);\\n```\\n\\n### Example 4: Using `useRef` Hook\\n\\nThis example demonstrates how to use the `useRef` hook to access a DOM element directly. ```tsx\\nimport React, { useRef } from 'react';\\nimport { createRoot } from 'react-dom/client';\\n\\nfunction TextInputWithFocusButton() {\\n  const inputEl = useRef<HTMLInputElement>(null);\\n\\n  const onButtonClick = () => {\\n    if (inputEl.current) {\\n      inputEl.current.focus();\\n    }\\n  };\\n\\n  return (\\n    <>\\n      <input ref={inputEl} type=\\\"text\\\" />\\n      <button onClick={onButtonClick}>Focus the input</button>\\n    </>\\n  );\\n}\\n\\nconst root = createRoot(document.getElementById('root'));\\nroot.render(<TextInputWithFocusButton />);\\n```\\n\\n### Example 5: Using `useReducer` Hook\\n\\nThis example demonstrates how to use the `useReducer` hook for more complex state management. ```tsx\\nimport React, { useReducer } from 'react';\\nimport { createRoot } from 'react-dom/client';\\n\\ntype Action = { type: 'increment' } | { type: 'decrement' };\\n\\nfunction counterReducer(state: number, action: Action): number {\\n  switch (action.type) {\\n    case 'increment':\\n      return state + 1;\\n    case 'decrement':\\n      return state - 1;\\n    default:\\n      throw new Error();\\n  }\\n}\\n\\nfunction Counter() {\\n  const [count, dispatch] = useReducer(counterReducer, 0);\\n\\n  return (\\n    <>\\n      <h1>{count}</h1>\\n      <button onClick={() => dispatch({ type: 'increment' })}>Increment</button>\\n      <button onClick={() => dispatch({ type: 'decrement' })}>Decrement</button>\\n    </>\\n  );\\n}\\n\\nconst root = createRoot(document.getElementById('root'));\\nroot.render(<Counter />);\\n```\\n\\nThese examples cover basic usage of React hooks (`useState`, `useEffect`, `useContext`, `useRef`, `useReducer`) and the Context API, which are fundamental concepts in modern React development.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\",\"hash\":\"HLy8BT+mqfudjZ4XpPr5OBSGf11IgdLmA0LlnxoJbc8=\"}","__type__":"TEXT"},"b42290ee-8482-4fbc-b913-0e2fc09b1ed8":{"__data__":"{\"id_\":\"b42290ee-8482-4fbc-b913-0e2fc09b1ed8\",\"metadata\":{\"name\":\"react-dom\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"react-dom\",\"metadata\":{\"name\":\"react-dom\"},\"hash\":\"SCYJ90Oz/7oPppF/JwRgyCHCgdvzfh+AtprrTkDAFqI=\"}},\"text\":\"Sure! Here are some usage examples based on the provided README and TypeScript definitions for the `react-dom` library. ### Browser Usage Example\\n\\n```js\\nimport { createRoot } from 'react-dom/client';\\nimport React from 'react';\\n\\nfunction App() {\\n  return <div>Hello World</div>;\\n}\\n\\nconst root = createRoot(document.getElementById('root'));\\nroot.render(<App />);\\n```\\n\\n### Server-Side Rendering Example\\n\\n```js\\nimport { renderToPipeableStream } from 'react-dom/server';\\nimport React from 'react';\\n\\nfunction App() {\\n  return <div>Hello World</div>;\\n}\\n\\nfunction handleRequest(res) {\\n  const stream = renderToPipeableStream(<App />, {\\n    onShellReady() {\\n      res.statusCode = 200;\\n      res.setHeader('Content-type', 'text/html');\\n      stream.pipe(res);\\n    },\\n    // Add other options as needed\\n  });\\n}\\n```\\n\\n### Using `createPortal`\\n\\n```js\\nimport React, { useState } from 'react';\\nimport ReactDOM from 'react-dom';\\n\\nfunction Modal({ children }) {\\n  return ReactDOM.createPortal(\\n    <div className=\\\"modal\\\">\\n      {children}\\n    </div>,\\n    document.getElementById('modal-root')\\n  );\\n}\\n\\nfunction App() {\\n  const [showModal, setShowModal] = useState(false);\\n\\n  return (\\n    <div>\\n      <button onClick={() => setShowModal(true)}>Show Modal</button>\\n      {showModal && <Modal>Modal Content</Modal>}\\n    </div>\\n  );\\n}\\n\\nconst root = createRoot(document.getElementById('root'));\\nroot.render(<App />);\\n```\\n\\n### Using `flushSync`\\n\\n```js\\nimport React, { useState } from 'react';\\nimport { flushSync } from 'react-dom';\\n\\nfunction App() {\\n  const [count, setCount] = useState(0);\\n\\n  const handleClick = () => {\\n    flushSync(() => {\\n      setCount(count + 1);\\n    });\\n    // Do something immediately after state update\\n    console.log('Count updated:', count + 1);\\n  };\\n\\n  return (\\n    <div>\\n      <p>Count: {count}</p>\\n      <button onClick={handleClick}>Increment</button>\\n    </div>\\n  );\\n}\\n\\nconst root = createRoot(document.getElementById('root'));\\nroot.render(<App />);\\n```\\n\\n### Using `unstable_batchedUpdates`\\n\\n```js\\nimport React, { useState } from 'react';\\nimport { unstable_batchedUpdates } from 'react-dom';\\n\\nfunction App() {\\n  const [count1, setCount1] = useState(0);\\n  const [count2, setCount2] = useState(0);\\n\\n  const handleClick = () => {\\n    unstable_batchedUpdates(() => {\\n      setCount1(count1 + 1);\\n      setCount2(count2 + 1);\\n    });\\n    // Both state updates will be batched together\\n  };\\n\\n  return (\\n    <div>\\n      <p>Count1: {count1}</p>\\n      <p>Count2: {count2}</p>\\n      <button onClick={handleClick}>Increment Both</button>\\n    </div>\\n  );\\n}\\n\\nconst root = createRoot(document.getElementById('root'));\\nroot.render(<App />);\\n```\\n\\n### Deprecated API Usage (for reference)\\n\\n```js\\nimport React from 'react';\\nimport ReactDOM from 'react-dom';\\n\\nfunction App() {\\n  return <div>Hello World</div>;\\n}\\n\\n// Deprecated: Use createRoot instead\\nReactDOM.render(<App />, document.getElementById('root'));\\n\\n// Deprecated: Use createRoot and root.unmount() instead\\nReactDOM.unmountComponentAtNode(document.getElementById('root'));\\n```\\n\\nThese examples cover various use cases, including client-side rendering, server-side rendering, portals, and some of the deprecated APIs. For more detailed information, you can refer to the official React documentation.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\",\"hash\":\"3S76UOBLmfKvbUEsDEDx1HIXIXVInkEkvPaZ+jnTYf4=\"}","__type__":"TEXT"},"18f7c4fc-fb11-435c-917a-c73b84b5a981":{"__data__":"{\"id_\":\"18f7c4fc-fb11-435c-917a-c73b84b5a981\",\"metadata\":{\"name\":\"react-states\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"react-states\",\"metadata\":{\"name\":\"react-states\"},\"hash\":\"M5w4zytZbxsKWHVjSaWzo+N3hkDAIAPtdCL/W9mdbC0=\"},\"NEXT\":{\"nodeId\":\"210179f2-7e8a-4c4b-af12-27ada9edff07\",\"metadata\":{\"name\":\"react-states\"},\"hash\":\"zpaBJjSUzQ/wjfZgvyA70ph4krMYKrmj7CytUdomBAg=\"}},\"text\":\"Sure! Here are some usage examples based on the provided README and TypeScript definitions of the \\\"react-states\\\" library. ### Example 1: Basic Usage with `createTransitionsHook`\\n\\nThis example demonstrates how to use `createTransitionsHook` to manage state transitions and effects in a React component. ```tsx\\nimport React from \\\"react\\\";\\nimport { createTransitionsHook } from \\\"react-states\\\";\\n\\ntype State =\\n  | { status: \\\"NOT_LOADED\\\" }\\n  | { status: \\\"LOADING\\\" }\\n  | { status: \\\"LOADED\\\"; data: string }\\n  | { status: \\\"ERROR\\\"; error: string };\\n\\ntype Action = \\n  | { type: \\\"FETCH\\\" }\\n  | { type: \\\"FETCH_SUCCESS\\\"; data: string }\\n  | { type: \\\"FETCH_ERROR\\\"; error: string };\\n\\ntype Effect = { type: \\\"FETCH_DATA\\\" };\\n\\nconst useData = createTransitionsHook<State, Action, Effect>((transition) => ({\\n  NOT_LOADED: {\\n    FETCH: () =>\\n      transition(\\n        { status: \\\"LOADING\\\" },\\n        { type: \\\"FETCH_DATA\\\" }\\n      ),\\n  },\\n  LOADING: {\\n    FETCH_SUCCESS: ({ data }) =>\\n      transition({ status: \\\"LOADED\\\", data }),\\n    FETCH_ERROR: ({ error }) =>\\n      transition({ status: \\\"ERROR\\\", error }),\\n  },\\n  LOADED: {},\\n  ERROR: {},\\n}));\\n\\nconst DataComponent = () => {\\n  const [state, dispatch] = useData(\\n    {\\n      FETCH_DATA: async () => {\\n        try {\\n          const newData = await Promise.resolve(\\\"Some data\\\");\\n          dispatch({ type: \\\"FETCH_SUCCESS\\\", data: newData });\\n        } catch (error) {\\n          dispatch({ type: \\\"FETCH_ERROR\\\", error: \\\"Failed to fetch data\\\" });\\n        }\\n      },\\n    },\\n    { status: \\\"NOT_LOADED\\\" }\\n  );\\n\\n  return (\\n    <div>\\n      {state.status === \\\"NOT_LOADED\\\" && (\\n        <button onClick={() => dispatch({ type: \\\"FETCH\\\" })}>Load data</button>\\n      )}\\n      {state.status === \\\"LOADING\\\" && <p>Loading...</p>}\\n      {state.status === \\\"LOADED\\\" && <p>Data: {state.data}</p>}\\n      {state.status === \\\"ERROR\\\" && <p style={{ color: \\\"red\\\" }}>{state.error}</p>}\\n    </div>\\n  );\\n};\\n\\nexport default DataComponent;\\n```\\n\\n### Example 2: Using `match` for Exhaustive Matching\\n\\nThis example shows how to use the `match` function to render different UI based on the state. ```tsx\\nimport React from \\\"react\\\";\\nimport { match } from \\\"react-states\\\";\\nimport { useData } from \\\"./useData\\\"; // Assuming useData is defined as in Example 1\\n\\nconst DataComponent = () => {\\n  const [state, dispatch] = useData(\\n    {\\n      FETCH_DATA: async () => {\\n        try {\\n          const newData = await Promise.resolve(\\\"Some data\\\");\\n          dispatch({ type: \\\"FETCH_SUCCESS\\\", data: newData });\\n        } catch (error) {\\n          dispatch({ type: \\\"FETCH_ERROR\\\", error: \\\"Failed to fetch data\\\" });\\n        }\\n      },\\n    },\\n    { status: \\\"NOT_LOADED\\\" }\\n  );\\n\\n  return match(state, {\\n    NOT_LOADED: () => (\\n      <button onClick={() => dispatch({ type: \\\"FETCH\\\" })}>Load data</button>\\n    ),\\n    LOADING: () => <p>Loading...</p>,\\n    LOADED: ({ data }) => <p>Data: {data}</p>,\\n    ERROR: ({ error }) => <p style={{ color: \\\"red\\\" }}>{error}</p>,\\n  });\\n};\\n\\nexport default DataComponent;\\n```\\n\\n### Example 3: Using `match` for Partial Matching\\n\\nThis example demonstrates how to use `match` with a default case for unmatched states. ```tsx\\nimport React from \\\"react\\\";\\nimport { match } from \\\"react-states\\\";\\nimport { useData } from \\\"./useData\\\"; // Assuming useData is defined as in Example 1\\n\\nconst DataComponent = () => {\\n  const [state, dispatch] = useData(\\n    {\\n      FETCH_DATA: async () => {\\n        try {\\n          const newData = await Promise.resolve(\\\"Some data\\\");\\n          dispatch({ type: \\\"FETCH_SUCCESS\\\", data: newData });\\n        } catch (error) {\\n          dispatch({ type: \\\"FETCH_ERROR\\\", error: \\\"Failed to fetch data\\\" });\\n        }\\n      },\\n    },\\n    { status: \\\"NOT_LOADED\\\" }\\n  );\\n\\n  const dataWithDefault = match(\\n    state,\\n    {\\n      LOADED: ({ data }) => data,\\n    },\\n    () => \\\"No data yet\\\"\\n  );\\n\\n  return <div>Data: {dataWithDefault}</div>;\\n};\\n\\nexport default DataComponent;\\n```\\n\\n### Example 4: Debugging\\n\\nThis example shows how to enable debugging based on the environment.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\",\"hash\":\"StA0UNGloUQIaFuyZkJkl++zsXAdrPSB7AFIxXYo5Ds=\"}","__type__":"TEXT"},"210179f2-7e8a-4c4b-af12-27ada9edff07":{"__data__":"{\"id_\":\"210179f2-7e8a-4c4b-af12-27ada9edff07\",\"metadata\":{\"name\":\"react-states\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"react-states\",\"metadata\":{\"name\":\"react-states\"},\"hash\":\"M5w4zytZbxsKWHVjSaWzo+N3hkDAIAPtdCL/W9mdbC0=\"},\"PREVIOUS\":{\"nodeId\":\"18f7c4fc-fb11-435c-917a-c73b84b5a981\",\"metadata\":{\"name\":\"react-states\"},\"hash\":\"StA0UNGloUQIaFuyZkJkl++zsXAdrPSB7AFIxXYo5Ds=\"}},\"text\":\"```ts\\nimport { debugging } from \\\"react-states\\\";\\n\\ndebugging.active = Boolean(import.meta.env.DEV); // Enable debugging in development mode\\n```\\n\\nThese examples should help you get started with the \\\"react-states\\\" library and understand how to manage state transitions and effects in a type-safe manner.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\",\"hash\":\"zpaBJjSUzQ/wjfZgvyA70ph4krMYKrmj7CytUdomBAg=\"}","__type__":"TEXT"},"firebase":{"__data__":"{\"id_\":\"firebase\",\"metadata\":{\"name\":\"firebase\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"text\":\"Sure! Here are some usage examples based on the provided README and TypeScript definitions for the Firebase library, specifically focusing on Firebase Analytics.\\n\\n### Example 1: Basic Firebase Initialization and Analytics Setup\\n\\n```typescript\\nimport { initializeApp } from 'firebase/app';\\nimport { getAnalytics, logEvent } from 'firebase/analytics';\\n\\n// TODO: Replace the following with your app's Firebase project configuration\\nconst firebaseConfig = {\\n  apiKey: \\\"YOUR_API_KEY\\\",\\n  authDomain: \\\"YOUR_AUTH_DOMAIN\\\",\\n  projectId: \\\"YOUR_PROJECT_ID\\\",\\n  storageBucket: \\\"YOUR_STORAGE_BUCKET\\\",\\n  messagingSenderId: \\\"YOUR_MESSAGING_SENDER_ID\\\",\\n  appId: \\\"YOUR_APP_ID\\\",\\n  measurementId: \\\"YOUR_MEASUREMENT_ID\\\"\\n};\\n\\n// Initialize Firebase\\nconst app = initializeApp(firebaseConfig);\\n\\n// Initialize Firebase Analytics\\nconst analytics = getAnalytics(app);\\n\\n// Log a custom event\\nlogEvent(analytics, 'page_view', {\\n  page_title: 'Home Page',\\n  page_location: window.location.href,\\n  page_path: window.location.pathname\\n});\\n```\\n\\n### Example 2: Setting User Properties and Logging Events\\n\\n```typescript\\nimport { initializeApp } from 'firebase/app';\\nimport { getAnalytics, setUserId, setUserProperties, logEvent } from 'firebase/analytics';\\n\\n// TODO: Replace the following with your app's Firebase project configuration\\nconst firebaseConfig = {\\n  apiKey: \\\"YOUR_API_KEY\\\",\\n  authDomain: \\\"YOUR_AUTH_DOMAIN\\\",\\n  projectId: \\\"YOUR_PROJECT_ID\\\",\\n  storageBucket: \\\"YOUR_STORAGE_BUCKET\\\",\\n  messagingSenderId: \\\"YOUR_MESSAGING_SENDER_ID\\\",\\n  appId: \\\"YOUR_APP_ID\\\",\\n  measurementId: \\\"YOUR_MEASUREMENT_ID\\\"\\n};\\n\\n// Initialize Firebase\\nconst app = initializeApp(firebaseConfig);\\n\\n// Initialize Firebase Analytics\\nconst analytics = getAnalytics(app);\\n\\n// Set user ID\\nsetUserId(analytics, 'user123');\\n\\n// Set user properties\\nsetUserProperties(analytics, {\\n  favorite_color: 'blue',\\n  membership_level: 'gold'\\n});\\n\\n// Log a custom event\\nlogEvent(analytics, 'select_content', {\\n  content_type: 'image',\\n  item_id: 'P12345'\\n});\\n```\\n\\n### Example 3: Using Analytics in a Node.js Environment\\n\\n```typescript\\nconst { initializeApp } = require('firebase/app');\\nconst { getAnalytics, logEvent } = require('firebase/analytics');\\n\\n// TODO: Replace the following with your app's Firebase project configuration\\nconst firebaseConfig = {\\n  apiKey: \\\"YOUR_API_KEY\\\",\\n  authDomain: \\\"YOUR_AUTH_DOMAIN\\\",\\n  projectId: \\\"YOUR_PROJECT_ID\\\",\\n  storageBucket: \\\"YOUR_STORAGE_BUCKET\\\",\\n  messagingSenderId: \\\"YOUR_MESSAGING_SENDER_ID\\\",\\n  appId: \\\"YOUR_APP_ID\\\",\\n  measurementId: \\\"YOUR_MEASUREMENT_ID\\\"\\n};\\n\\n// Initialize Firebase\\nconst app = initializeApp(firebaseConfig);\\n\\n// Initialize Firebase Analytics\\nconst analytics = getAnalytics(app);\\n\\n// Log a custom event\\nlogEvent(analytics, 'purchase', {\\n  transaction_id: 'T12345',\\n  value: 29.99,\\n  currency: 'USD',\\n  items: [\\n    { item_id: 'P12345', item_name: 'Product Name', price: 29.99, quantity: 1 }\\n  ]\\n});\\n```\\n\\n### Example 4: Setting Consent Settings\\n\\n```typescript\\nimport { initializeApp } from 'firebase/app';\\nimport { getAnalytics, setConsent } from 'firebase/analytics';\\n\\n// TODO: Replace the following with your app's Firebase project configuration\\nconst firebaseConfig = {\\n  apiKey: \\\"YOUR_API_KEY\\\",\\n  authDomain: \\\"YOUR_AUTH_DOMAIN\\\",\\n  projectId: \\\"YOUR_PROJECT_ID\\\",\\n  storageBucket: \\\"YOUR_STORAGE_BUCKET\\\",\\n  messagingSenderId: \\\"YOUR_MESSAGING_SENDER_ID\\\",\\n  appId: \\\"YOUR_APP_ID\\\",\\n  measurementId: \\\"YOUR_MEASUREMENT_ID\\\"\\n};\\n\\n// Initialize Firebase\\nconst app = initializeApp(firebaseConfig);\\n\\n// Initialize Firebase Analytics\\nconst analytics = getAnalytics(app);\\n\\n// Set consent settings\\nsetConsent({\\n  ad_storage: 'granted',\\n  analytics_storage: 'granted'\\n});\\n```\\n\\nThese examples demonstrate how to initialize Firebase, set up Firebase Analytics, log events, set user properties, and configure consent settings. You can adapt these examples to fit your specific use case and project configuration.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\",\"hash\":\"pMYDu/w+xI7kwYWsQi3wbikWtJ5zF3NQ2eqaW7Q7DTc=\"}","__type__":"DOCUMENT"},"firebase/analytics":{"__data__":"{\"id_\":\"firebase/analytics\",\"metadata\":{\"name\":\"firebase/analytics\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"text\":\"Certainly! Here are some usage examples based on the TypeScript definitions you provided for the Firebase Analytics Web SDK:\\n\\n### Example 1: Initializing Firebase Analytics\\n```typescript\\nimport { initializeApp } from '@firebase/app';\\nimport { getAnalytics, initializeAnalytics } from '@firebase/analytics';\\n\\n// Initialize Firebase app\\nconst firebaseConfig = {\\n  apiKey: \\\"your-api-key\\\",\\n  authDomain: \\\"your-auth-domain\\\",\\n  projectId: \\\"your-project-id\\\",\\n  storageBucket: \\\"your-storage-bucket\\\",\\n  messagingSenderId: \\\"your-messaging-sender-id\\\",\\n  appId: \\\"your-app-id\\\",\\n  measurementId: \\\"your-measurement-id\\\"\\n};\\n\\nconst app = initializeApp(firebaseConfig);\\n\\n// Initialize Analytics\\nconst analytics = initializeAnalytics(app);\\n```\\n\\n### Example 2: Logging an Event\\n```typescript\\nimport { logEvent } from '@firebase/analytics';\\n\\n// Log a 'page_view' event\\nlogEvent(analytics, 'page_view', {\\n  page_title: 'Home Page',\\n  page_location: 'https://example.com/home',\\n  page_path: '/home'\\n});\\n```\\n\\n### Example 3: Setting User Properties\\n```typescript\\nimport { setUserProperties } from '@firebase/analytics';\\n\\n// Set user properties\\nsetUserProperties(analytics, {\\n  favorite_color: 'blue',\\n  membership_level: 'gold'\\n});\\n```\\n\\n### Example 4: Setting Consent Settings\\n```typescript\\nimport { setConsent } from '@firebase/analytics';\\n\\n// Set consent settings\\nsetConsent({\\n  ad_storage: 'granted',\\n  analytics_storage: 'granted'\\n});\\n```\\n\\n### Example 5: Logging a Custom Event\\n```typescript\\nimport { logEvent } from '@firebase/analytics';\\n\\n// Log a custom event\\nlogEvent(analytics, 'custom_event_name', {\\n  custom_param1: 'value1',\\n  custom_param2: 'value2'\\n});\\n```\\n\\n### Example 6: Checking if Analytics is Supported\\n```typescript\\nimport { isSupported } from '@firebase/analytics';\\n\\n// Check if analytics is supported\\nisSupported().then(supported => {\\n  if (supported) {\\n    console.log('Analytics is supported');\\n  } else {\\n    console.log('Analytics is not supported');\\n  }\\n});\\n```\\n\\n### Example 7: Setting User ID\\n```typescript\\nimport { setUserId } from '@firebase/analytics';\\n\\n// Set user ID\\nsetUserId(analytics, 'user123');\\n```\\n\\n### Example 8: Logging an E-commerce Event\\n```typescript\\nimport { logEvent } from '@firebase/analytics';\\n\\n// Log an 'add_to_cart' event\\nlogEvent(analytics, 'add_to_cart', {\\n  currency: 'USD',\\n  value: 29.99,\\n  items: [\\n    {\\n      item_id: 'item123',\\n      item_name: 'T-Shirt',\\n      item_category: 'Apparel',\\n      price: 29.99,\\n      quantity: 1\\n    }\\n  ]\\n});\\n```\\n\\n### Example 9: Setting Default Event Parameters\\n```typescript\\nimport { setDefaultEventParameters } from '@firebase/analytics';\\n\\n// Set default event parameters\\nsetDefaultEventParameters({\\n  currency: 'USD',\\n  country: 'US'\\n});\\n```\\n\\n### Example 10: Retrieving Google Analytics Client ID\\n```typescript\\nimport { getGoogleAnalyticsClientId } from '@firebase/analytics';\\n\\n// Get Google Analytics client ID\\ngetGoogleAnalyticsClientId(analytics).then(clientId => {\\n  console.log('Google Analytics Client ID:', clientId);\\n});\\n```\\n\\nThese examples should help you get started with using the Firebase Analytics Web SDK in a TypeScript environment. Make sure to replace placeholder values like `your-api-key`, `your-auth-domain`, etc., with your actual Firebase project configuration values.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\",\"hash\":\"lC1KWdXpMXfzFiIrbmyYyWFPFSksn6WYgRk3lyeU7UI=\"}","__type__":"DOCUMENT"},"firebase/app":{"__data__":"{\"id_\":\"firebase/app\",\"metadata\":{\"name\":\"firebase/app\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"text\":\"Certainly! Here are some usage examples based on the provided TypeScript definitions for the Firebase dependency:\\n\\n### Example 1: Initializing the Default Firebase App\\n\\n```typescript\\nimport { initializeApp, getApp } from 'firebase/app';\\n\\nconst firebaseConfig = {\\n  apiKey: \\\"AIza....\\\",\\n  authDomain: \\\"YOUR_APP.firebaseapp.com\\\",\\n  databaseURL: \\\"https://YOUR_APP.firebaseio.com\\\",\\n  storageBucket: \\\"YOUR_APP.appspot.com\\\",\\n  messagingSenderId: \\\"123456789\\\",\\n  appId: \\\"1:123456789:web:abcdefg12345\\\"\\n};\\n\\n// Initialize the default app\\nconst app = initializeApp(firebaseConfig);\\n\\n// Retrieve the default app\\nconst defaultApp = getApp();\\nconsole.log(defaultApp.name);  // \\\"[DEFAULT]\\\"\\n```\\n\\n### Example 2: Initializing a Named Firebase App\\n\\n```typescript\\nimport { initializeApp, getApp } from 'firebase/app';\\n\\nconst otherAppConfig = {\\n  databaseURL: \\\"https://<OTHER_DATABASE_NAME>.firebaseio.com\\\",\\n  storageBucket: \\\"<OTHER_STORAGE_BUCKET>.appspot.com\\\"\\n};\\n\\n// Initialize another app\\nconst otherApp = initializeApp(otherAppConfig, \\\"otherApp\\\");\\n\\n// Retrieve the named app\\nconst retrievedOtherApp = getApp(\\\"otherApp\\\");\\nconsole.log(retrievedOtherApp.name);  // \\\"otherApp\\\"\\n```\\n\\n### Example 3: Deleting a Firebase App\\n\\n```typescript\\nimport { initializeApp, deleteApp } from 'firebase/app';\\n\\nconst firebaseConfig = {\\n  apiKey: \\\"AIza....\\\",\\n  authDomain: \\\"YOUR_APP.firebaseapp.com\\\",\\n  databaseURL: \\\"https://YOUR_APP.firebaseio.com\\\",\\n  storageBucket: \\\"YOUR_APP.appspot.com\\\",\\n  messagingSenderId: \\\"123456789\\\",\\n  appId: \\\"1:123456789:web:abcdefg12345\\\"\\n};\\n\\n// Initialize the default app\\nconst app = initializeApp(firebaseConfig);\\n\\n// Delete the app\\ndeleteApp(app)\\n  .then(() => {\\n    console.log(\\\"App deleted successfully\\\");\\n  })\\n  .catch((error) => {\\n    console.log(\\\"Error deleting app:\\\", error);\\n  });\\n```\\n\\n### Example 4: Setting Log Level and Log Handler\\n\\n```typescript\\nimport { setLogLevel, onLog, LogLevelString } from 'firebase/app';\\n\\n// Set log level to 'debug'\\nsetLogLevel('debug' as LogLevelString);\\n\\n// Set a custom log handler\\nonLog((logEntry) => {\\n  console.log(`[${logEntry.level}] ${logEntry.message}`);\\n});\\n```\\n\\n### Example 5: Registering a Library Version\\n\\n```typescript\\nimport { registerVersion } from 'firebase/app';\\n\\n// Register a library version\\nregisterVersion('my-custom-library', '1.0.0', 'node');\\n```\\n\\n### Example 6: Initializing a Firebase Server App\\n\\n```typescript\\nimport { initializeServerApp } from 'firebase/app';\\n\\nconst serverAppConfig = {\\n  apiKey: \\\"AIza....\\\",\\n  authDomain: \\\"YOUR_APP.firebaseapp.com\\\",\\n  databaseURL: \\\"https://YOUR_APP.firebaseio.com\\\",\\n  storageBucket: \\\"YOUR_APP.appspot.com\\\",\\n  messagingSenderId: \\\"123456789\\\",\\n  appId: \\\"1:123456789:web:abcdefg12345\\\"\\n};\\n\\nconst serverAppSettings = {\\n  authIdToken: \\\"Your Auth ID Token\\\"\\n};\\n\\n// Initialize a server app\\nconst serverApp = initializeServerApp(serverAppConfig, serverAppSettings);\\nconsole.log(serverApp.settings.authIdToken);  // \\\"Your Auth ID Token\\\"\\n```\\n\\nThese examples cover initializing apps, retrieving apps, deleting apps, setting log levels, registering library versions, and initializing server apps. Adjust the configuration objects and parameters as needed for your specific Firebase project.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\",\"hash\":\"KUq5f68Cmya1Up46p05IAoWu4z5qLZSUrvR95wEufBM=\"}","__type__":"DOCUMENT"},"firebase/app-check":{"__data__":"{\"id_\":\"firebase/app-check\",\"metadata\":{\"name\":\"firebase/app-check\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"text\":\"Sure! Here are some usage examples based on the provided TypeScript definitions for the Firebase App Check module:\\n\\n### Example 1: Initialize App Check with ReCaptchaV3Provider\\n\\n```typescript\\nimport { initializeApp } from '@firebase/app';\\nimport { initializeAppCheck, ReCaptchaV3Provider } from '@firebase/app-check';\\n\\n// Initialize Firebase app\\nconst firebaseConfig = {\\n  apiKey: \\\"YOUR_API_KEY\\\",\\n  authDomain: \\\"YOUR_AUTH_DOMAIN\\\",\\n  projectId: \\\"YOUR_PROJECT_ID\\\",\\n  storageBucket: \\\"YOUR_STORAGE_BUCKET\\\",\\n  messagingSenderId: \\\"YOUR_MESSAGING_SENDER_ID\\\",\\n  appId: \\\"YOUR_APP_ID\\\"\\n};\\nconst app = initializeApp(firebaseConfig);\\n\\n// Initialize App Check with ReCaptchaV3Provider\\nconst appCheck = initializeAppCheck(app, {\\n  provider: new ReCaptchaV3Provider('YOUR_RECAPTCHA_SITE_KEY'),\\n  isTokenAutoRefreshEnabled: true\\n});\\n```\\n\\n### Example 2: Initialize App Check with CustomProvider\\n\\n```typescript\\nimport { initializeApp } from '@firebase/app';\\nimport { initializeAppCheck, CustomProvider, AppCheckToken } from '@firebase/app-check';\\n\\n// Initialize Firebase app\\nconst firebaseConfig = {\\n  apiKey: \\\"YOUR_API_KEY\\\",\\n  authDomain: \\\"YOUR_AUTH_DOMAIN\\\",\\n  projectId: \\\"YOUR_PROJECT_ID\\\",\\n  storageBucket: \\\"YOUR_STORAGE_BUCKET\\\",\\n  messagingSenderId: \\\"YOUR_MESSAGING_SENDER_ID\\\",\\n  appId: \\\"YOUR_APP_ID\\\"\\n};\\nconst app = initializeApp(firebaseConfig);\\n\\n// Custom token provider function\\nconst getToken = async (): Promise<AppCheckToken> => {\\n  // Implement your custom token fetching logic here\\n  return {\\n    token: 'YOUR_CUSTOM_TOKEN',\\n    expireTimeMillis: Date.now() + 3600 * 1000 // 1 hour expiry\\n  };\\n};\\n\\n// Initialize App Check with CustomProvider\\nconst appCheck = initializeAppCheck(app, {\\n  provider: new CustomProvider({ getToken }),\\n  isTokenAutoRefreshEnabled: true\\n});\\n```\\n\\n### Example 3: Get App Check Token\\n\\n```typescript\\nimport { getToken } from '@firebase/app-check';\\n\\n// Assuming `appCheck` is already initialized\\ngetToken(appCheck, true).then(tokenResult => {\\n  console.log('App Check Token:', tokenResult.token);\\n}).catch(error => {\\n  console.error('Error getting App Check token:', error);\\n});\\n```\\n\\n### Example 4: Listen to Token Changes\\n\\n```typescript\\nimport { onTokenChanged } from '@firebase/app-check';\\n\\n// Assuming `appCheck` is already initialized\\nconst unsubscribe = onTokenChanged(appCheck, tokenResult => {\\n  console.log('Token changed:', tokenResult.token);\\n}, error => {\\n  console.error('Error in token listener:', error);\\n});\\n\\n// To unsubscribe from the listener\\nunsubscribe();\\n```\\n\\n### Example 5: Set Token Auto Refresh\\n\\n```typescript\\nimport { setTokenAutoRefreshEnabled } from '@firebase/app-check';\\n\\n// Assuming `appCheck` is already initialized\\nsetTokenAutoRefreshEnabled(appCheck, true);\\n```\\n\\n### Example 6: Get Limited Use Token\\n\\n```typescript\\nimport { getLimitedUseToken } from '@firebase/app-check';\\n\\n// Assuming `appCheck` is already initialized\\ngetLimitedUseToken(appCheck).then(tokenResult => {\\n  console.log('Limited Use Token:', tokenResult.token);\\n}).catch(error => {\\n  console.error('Error getting limited use token:', error);\\n});\\n```\\n\\nThese examples cover initializing App Check with different providers, fetching tokens, listening to token changes, enabling auto-refresh, and getting limited-use tokens. Adjust the configurations and logic as per your application's requirements.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\",\"hash\":\"93jult+GP0WGUbpOZj0Kg4895OV0gwswUx0UCyVZ5oc=\"}","__type__":"DOCUMENT"},"firebase/auth":{"__data__":"{\"id_\":\"firebase/auth\",\"metadata\":{\"name\":\"firebase/auth\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"text\":\"Sure! Here are some usage examples based on the provided TypeScript definitions for the Firebase Authentication module:\\n\\n### Example 1: Sign In with Email and Password\\n\\n```typescript\\nimport { getAuth, signInWithEmailAndPassword } from \\\"firebase/auth\\\";\\n\\nconst auth = getAuth();\\n\\nasync function signIn(email: string, password: string) {\\n  try {\\n    const userCredential = await signInWithEmailAndPassword(auth, email, password);\\n    console.log(\\\"Signed in user:\\\", userCredential.user);\\n  } catch (error) {\\n    console.error(\\\"Error signing in:\\\", error);\\n  }\\n}\\n\\nsignIn(\\\"user@example.com\\\", \\\"password123\\\");\\n```\\n\\n### Example 2: Send Password Reset Email\\n\\n```typescript\\nimport { getAuth, sendPasswordResetEmail } from \\\"firebase/auth\\\";\\n\\nconst auth = getAuth();\\n\\nasync function resetPassword(email: string) {\\n  try {\\n    await sendPasswordResetEmail(auth, email);\\n    console.log(\\\"Password reset email sent!\\\");\\n  } catch (error) {\\n    console.error(\\\"Error sending password reset email:\\\", error);\\n  }\\n}\\n\\nresetPassword(\\\"user@example.com\\\");\\n```\\n\\n### Example 3: Sign In with Google Popup\\n\\n```typescript\\nimport { getAuth, signInWithPopup, GoogleAuthProvider } from \\\"firebase/auth\\\";\\n\\nconst auth = getAuth();\\nconst provider = new GoogleAuthProvider();\\n\\nasync function signInWithGoogle() {\\n  try {\\n    const result = await signInWithPopup(auth, provider);\\n    const user = result.user;\\n    console.log(\\\"Signed in user:\\\", user);\\n  } catch (error) {\\n    console.error(\\\"Error signing in with Google:\\\", error);\\n  }\\n}\\n\\nsignInWithGoogle();\\n```\\n\\n### Example 4: Multi-Factor Authentication (MFA) Enrollment\\n\\n```typescript\\nimport { getAuth, multiFactor, PhoneAuthProvider, RecaptchaVerifier } from \\\"firebase/auth\\\";\\n\\nconst auth = getAuth();\\n\\nasync function enrollMFA(phoneNumber: string) {\\n  const user = auth.currentUser;\\n  if (!user) {\\n    throw new Error(\\\"No user is signed in\\\");\\n  }\\n\\n  const multiFactorUser = multiFactor(user);\\n  const session = await multiFactorUser.getSession();\\n\\n  const phoneAuthProvider = new PhoneAuthProvider(auth);\\n  const verificationId = await phoneAuthProvider.verifyPhoneNumber(\\n    { phoneNumber, session },\\n    new RecaptchaVerifier('recaptcha-container')\\n  );\\n\\n  const verificationCode = prompt(\\\"Enter the verification code you received\\\");\\n  const phoneCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\\n  const assertion = PhoneMultiFactorGenerator.assertion(phoneCredential);\\n\\n  await multiFactorUser.enroll(assertion, \\\"My phone number\\\");\\n  console.log(\\\"MFA enrollment successful\\\");\\n}\\n\\nenrollMFA(\\\"+1234567890\\\");\\n```\\n\\n### Example 5: Link with Email Link\\n\\n```typescript\\nimport { getAuth, sendSignInLinkToEmail, isSignInWithEmailLink, signInWithEmailLink } from \\\"firebase/auth\\\";\\n\\nconst auth = getAuth();\\nconst email = \\\"user@example.com\\\";\\n\\nasync function sendEmailLink() {\\n  const actionCodeSettings = {\\n    url: 'https://www.example.com/finishSignUp?cartId=1234',\\n    handleCodeInApp: true,\\n  };\\n\\n  try {\\n    await sendSignInLinkToEmail(auth, email, actionCodeSettings);\\n    window.localStorage.setItem('emailForSignIn', email);\\n    console.log(\\\"Sign-in email sent!\\\");\\n  } catch (error) {\\n    console.error(\\\"Error sending sign-in email:\\\", error);\\n  }\\n}\\n\\nasync function completeSignIn() {\\n  if (isSignInWithEmailLink(auth, window.location.href)) {\\n    const email = window.localStorage.getItem('emailForSignIn');\\n    if (!email) {\\n      throw new Error(\\\"No email found in local storage\\\");\\n    }\\n\\n    try {\\n      const result = await signInWithEmailLink(auth, email, window.location.href);\\n      console.log(\\\"Signed in user:\\\", result.user);\\n      window.localStorage.removeItem('emailForSignIn');\\n    } catch (error) {\\n      console.error(\\\"Error completing sign-in:\\\", error);\\n    }\\n  }\\n}\\n\\nsendEmailLink();\\n// Call completeSignIn() when the user returns to the app with the email link\\n```\\n\\n### Example 6: Check Action Code\\n\\n```typescript\\nimport { getAuth, checkActionCode } from \\\"firebase/auth\\\";\\n\\nconst auth = getAuth();\\n\\nasync function checkCode(oobCode: string) {\\n  try {\\n    const info = await checkActionCode(auth, oobCode);\\n    console.log(\\\"Action code info:\\\", info);\\n  } catch (error) {\\n    console.error(\\\"Error checking action code:\\\", error);\\n  }\\n}\\n\\ncheckCode(\\\"OOB_CODE_FROM_EMAIL\\\");\\n```\\n\\nThese examples cover various functionalities provided by Firebase Authentication, such as signing in with email and password, sending a password reset email, signing in with Google, enrolling in multi-factor authentication, linking with an email link, and checking an action code.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\",\"hash\":\"s6fhfEzyXpsdD2TBzQsG+ysTigV4ncUxJfC9ePXvksM=\"}","__type__":"DOCUMENT"},"firebase/auth/cordova":{"__data__":"{\"id_\":\"firebase/auth/cordova\",\"metadata\":{\"name\":\"firebase/auth/cordova\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"text\":\"Certainly! Below are some usage examples for the Firebase Authentication module in a TypeScript environment. These examples assume you are using the Firebase Authentication library for Cordova, as indicated by the import statement.\\n\\n### 1. Setting Up Firebase in a Cordova Project\\n\\nFirst, ensure you have Firebase configured in your project. You need to initialize Firebase with your project's configuration.\\n\\n```typescript\\nimport firebase from 'firebase/app';\\nimport 'firebase/auth';\\n\\n// Your web app's Firebase configuration\\nconst firebaseConfig = {\\n  apiKey: \\\"YOUR_API_KEY\\\",\\n  authDomain: \\\"YOUR_PROJECT_ID.firebaseapp.com\\\",\\n  projectId: \\\"YOUR_PROJECT_ID\\\",\\n  storageBucket: \\\"YOUR_PROJECT_ID.appspot.com\\\",\\n  messagingSenderId: \\\"YOUR_MESSAGING_SENDER_ID\\\",\\n  appId: \\\"YOUR_APP_ID\\\"\\n};\\n\\n// Initialize Firebase\\nfirebase.initializeApp(firebaseConfig);\\n```\\n\\n### 2. User Registration with Email and Password\\n\\n```typescript\\nimport { getAuth, createUserWithEmailAndPassword } from '@firebase/auth/cordova';\\n\\nconst auth = getAuth();\\n\\nconst registerUser = async (email: string, password: string) => {\\n  try {\\n    const userCredential = await createUserWithEmailAndPassword(auth, email, password);\\n    console.log('User registered:', userCredential.user);\\n  } catch (error) {\\n    console.error('Error registering user:', error);\\n  }\\n};\\n\\n// Usage\\nregisterUser('test@example.com', 'password123');\\n```\\n\\n### 3. User Login with Email and Password\\n\\n```typescript\\nimport { getAuth, signInWithEmailAndPassword } from '@firebase/auth/cordova';\\n\\nconst auth = getAuth();\\n\\nconst loginUser = async (email: string, password: string) => {\\n  try {\\n    const userCredential = await signInWithEmailAndPassword(auth, email, password);\\n    console.log('User logged in:', userCredential.user);\\n  } catch (error) {\\n    console.error('Error logging in user:', error);\\n  }\\n};\\n\\n// Usage\\nloginUser('test@example.com', 'password123');\\n```\\n\\n### 4. Sending a Password Reset Email\\n\\n```typescript\\nimport { getAuth, sendPasswordResetEmail } from '@firebase/auth/cordova';\\n\\nconst auth = getAuth();\\n\\nconst resetPassword = async (email: string) => {\\n  try {\\n    await sendPasswordResetEmail(auth, email);\\n    console.log('Password reset email sent');\\n  } catch (error) {\\n    console.error('Error sending password reset email:', error);\\n  }\\n};\\n\\n// Usage\\nresetPassword('test@example.com');\\n```\\n\\n### 5. Signing Out a User\\n\\n```typescript\\nimport { getAuth, signOut } from '@firebase/auth/cordova';\\n\\nconst auth = getAuth();\\n\\nconst logoutUser = async () => {\\n  try {\\n    await signOut(auth);\\n    console.log('User signed out');\\n  } catch (error) {\\n    console.error('Error signing out user:', error);\\n  }\\n};\\n\\n// Usage\\nlogoutUser();\\n```\\n\\n### 6. Observing Authentication State\\n\\n```typescript\\nimport { getAuth, onAuthStateChanged } from '@firebase/auth/cordova';\\n\\nconst auth = getAuth();\\n\\nonAuthStateChanged(auth, (user) => {\\n  if (user) {\\n    console.log('User is signed in:', user);\\n  } else {\\n    console.log('No user is signed in');\\n  }\\n});\\n```\\n\\nThese examples cover basic authentication operations such as user registration, login, password reset, sign-out, and observing authentication state changes. Make sure to replace `\\\"YOUR_API_KEY\\\"`, `\\\"YOUR_PROJECT_ID\\\"`, `\\\"YOUR_MESSAGING_SENDER_ID\\\"`, and `\\\"YOUR_APP_ID\\\"` with your actual Firebase project configuration values.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\",\"hash\":\"zW0oBH1imKTlLe3FZ0CwUdkpqx27gAiTW4OhjCD3dgE=\"}","__type__":"DOCUMENT"},"firebase/auth/web-extension":{"__data__":"{\"id_\":\"firebase/auth/web-extension\",\"metadata\":{\"name\":\"firebase/auth/web-extension\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"text\":\"Certainly! The TypeScript definitions you provided indicate that the module re-exports everything from the `@firebase/auth/web-extension` package. This means you can use all the functionalities provided by `@firebase/auth/web-extension` through this module.\\n\\nHere are some usage examples:\\n\\n### Example 1: Initializing Firebase Authentication\\n```typescript\\nimport { initializeApp } from 'firebase/app';\\nimport { getAuth, signInWithPopup, GoogleAuthProvider } from 'firebase';\\n\\nconst firebaseConfig = {\\n  apiKey: \\\"YOUR_API_KEY\\\",\\n  authDomain: \\\"YOUR_AUTH_DOMAIN\\\",\\n  projectId: \\\"YOUR_PROJECT_ID\\\",\\n  storageBucket: \\\"YOUR_STORAGE_BUCKET\\\",\\n  messagingSenderId: \\\"YOUR_MESSAGING_SENDER_ID\\\",\\n  appId: \\\"YOUR_APP_ID\\\"\\n};\\n\\n// Initialize Firebase\\nconst app = initializeApp(firebaseConfig);\\n\\n// Initialize Firebase Authentication and get a reference to the service\\nconst auth = getAuth(app);\\n\\n// Sign in with Google\\nconst provider = new GoogleAuthProvider();\\nsignInWithPopup(auth, provider)\\n  .then((result) => {\\n    // This gives you a Google Access Token. You can use it to access the Google API.\\n    const credential = GoogleAuthProvider.credentialFromResult(result);\\n    const token = credential?.accessToken;\\n\\n    // The signed-in user info.\\n    const user = result.user;\\n    console.log('User signed in:', user);\\n  })\\n  .catch((error) => {\\n    // Handle Errors here.\\n    const errorCode = error.code;\\n    const errorMessage = error.message;\\n    const email = error.customData.email;\\n    const credential = GoogleAuthProvider.credentialFromError(error);\\n    console.error('Error signing in:', errorCode, errorMessage);\\n  });\\n```\\n\\n### Example 2: Creating a New User with Email and Password\\n```typescript\\nimport { initializeApp } from 'firebase/app';\\nimport { getAuth, createUserWithEmailAndPassword } from 'firebase';\\n\\nconst firebaseConfig = {\\n  apiKey: \\\"YOUR_API_KEY\\\",\\n  authDomain: \\\"YOUR_AUTH_DOMAIN\\\",\\n  projectId: \\\"YOUR_PROJECT_ID\\\",\\n  storageBucket: \\\"YOUR_STORAGE_BUCKET\\\",\\n  messagingSenderId: \\\"YOUR_MESSAGING_SENDER_ID\\\",\\n  appId: \\\"YOUR_APP_ID\\\"\\n};\\n\\n// Initialize Firebase\\nconst app = initializeApp(firebaseConfig);\\n\\n// Initialize Firebase Authentication and get a reference to the service\\nconst auth = getAuth(app);\\n\\nconst email = \\\"user@example.com\\\";\\nconst password = \\\"user_password\\\";\\n\\ncreateUserWithEmailAndPassword(auth, email, password)\\n  .then((userCredential) => {\\n    // Signed in\\n    const user = userCredential.user;\\n    console.log('User created:', user);\\n  })\\n  .catch((error) => {\\n    const errorCode = error.code;\\n    const errorMessage = error.message;\\n    console.error('Error creating user:', errorCode, errorMessage);\\n  });\\n```\\n\\n### Example 3: Sending a Password Reset Email\\n```typescript\\nimport { initializeApp } from 'firebase/app';\\nimport { getAuth, sendPasswordResetEmail } from 'firebase';\\n\\nconst firebaseConfig = {\\n  apiKey: \\\"YOUR_API_KEY\\\",\\n  authDomain: \\\"YOUR_AUTH_DOMAIN\\\",\\n  projectId: \\\"YOUR_PROJECT_ID\\\",\\n  storageBucket: \\\"YOUR_STORAGE_BUCKET\\\",\\n  messagingSenderId: \\\"YOUR_MESSAGING_SENDER_ID\\\",\\n  appId: \\\"YOUR_APP_ID\\\"\\n};\\n\\n// Initialize Firebase\\nconst app = initializeApp(firebaseConfig);\\n\\n// Initialize Firebase Authentication and get a reference to the service\\nconst auth = getAuth(app);\\n\\nconst email = \\\"user@example.com\\\";\\n\\nsendPasswordResetEmail(auth, email)\\n  .then(() => {\\n    console.log('Password reset email sent!');\\n  })\\n  .catch((error) => {\\n    const errorCode = error.code;\\n    const errorMessage = error.message;\\n    console.error('Error sending password reset email:', errorCode, errorMessage);\\n  });\\n```\\n\\nThese examples demonstrate how to use Firebase Authentication functionalities such as signing in with Google, creating a new user with email and password, and sending a password reset email. Make sure to replace the placeholder values in `firebaseConfig` with your actual Firebase project configuration.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\",\"hash\":\"j7z7Gr8EACUewMqIrTeE9WLItfvXNXsIlKUrG+psCFA=\"}","__type__":"DOCUMENT"},"firebase/database":{"__data__":"{\"id_\":\"firebase/database\",\"metadata\":{\"name\":\"firebase/database\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"text\":\"Sure, here are some usage examples based on the provided TypeScript definitions for Firebase Realtime Database:\\n\\n### Example 1: Initialize Firebase and Get Database Reference\\n\\n```typescript\\nimport { initializeApp } from '@firebase/app';\\nimport { getDatabase, ref, set, get, child } from '@firebase/database';\\n\\n// Initialize Firebase\\nconst firebaseConfig = {\\n  apiKey: \\\"YOUR_API_KEY\\\",\\n  authDomain: \\\"YOUR_AUTH_DOMAIN\\\",\\n  databaseURL: \\\"YOUR_DATABASE_URL\\\",\\n  projectId: \\\"YOUR_PROJECT_ID\\\",\\n  storageBucket: \\\"YOUR_STORAGE_BUCKET\\\",\\n  messagingSenderId: \\\"YOUR_MESSAGING_SENDER_ID\\\",\\n  appId: \\\"YOUR_APP_ID\\\"\\n};\\n\\nconst app = initializeApp(firebaseConfig);\\nconst db = getDatabase(app);\\n\\n// Get a reference to the root of the database\\nconst rootRef = ref(db);\\n\\n// Set some data\\nset(ref(db, 'users/ada'), {\\n  name: 'Ada Lovelace',\\n  age: 30\\n}).then(() => {\\n  console.log('Data set successfully');\\n}).catch((error) => {\\n  console.error('Error setting data:', error);\\n});\\n\\n// Get data\\nget(child(rootRef, 'users/ada')).then((snapshot) => {\\n  if (snapshot.exists()) {\\n    console.log(snapshot.val());\\n  } else {\\n    console.log('No data available');\\n  }\\n}).catch((error) => {\\n  console.error('Error getting data:', error);\\n});\\n```\\n\\n### Example 2: Using Transactions\\n\\n```typescript\\nimport { runTransaction } from '@firebase/database';\\n\\n// Reference to the data location\\nconst adaRef = ref(db, 'users/ada');\\n\\n// Transaction to increment age\\nrunTransaction(adaRef, (currentData) => {\\n  if (currentData) {\\n    currentData.age = (currentData.age || 0) + 1;\\n  }\\n  return currentData;\\n}).then((result) => {\\n  if (result.committed) {\\n    console.log('Transaction committed:', result.snapshot.val());\\n  } else {\\n    console.log('Transaction not committed');\\n  }\\n}).catch((error) => {\\n  console.error('Transaction failed:', error);\\n});\\n```\\n\\n### Example 3: Listening for Data Changes\\n\\n```typescript\\nimport { onValue, off } from '@firebase/database';\\n\\n// Reference to the data location\\nconst adaRef = ref(db, 'users/ada');\\n\\n// Listen for value changes\\nconst unsubscribe = onValue(adaRef, (snapshot) => {\\n  const data = snapshot.val();\\n  console.log('Data changed:', data);\\n}, (error) => {\\n  console.error('Error listening for changes:', error);\\n});\\n\\n// Later, to stop listening\\nunsubscribe();\\n```\\n\\n### Example 4: Querying Data\\n\\n```typescript\\nimport { query, orderByChild, limitToFirst, get } from '@firebase/database';\\n\\n// Reference to the data location\\nconst usersRef = ref(db, 'users');\\n\\n// Create a query to get the first 10 users ordered by age\\nconst usersQuery = query(usersRef, orderByChild('age'), limitToFirst(10));\\n\\n// Get the data\\nget(usersQuery).then((snapshot) => {\\n  if (snapshot.exists()) {\\n    snapshot.forEach((childSnapshot) => {\\n      console.log(childSnapshot.key, childSnapshot.val());\\n    });\\n  } else {\\n    console.log('No data available');\\n  }\\n}).catch((error) => {\\n  console.error('Error querying data:', error);\\n});\\n```\\n\\n### Example 5: Using OnDisconnect\\n\\n```typescript\\nimport { onDisconnect } from '@firebase/database';\\n\\n// Reference to the data location\\nconst presenceRef = ref(db, 'users/ada/presence');\\n\\n// Set up onDisconnect to set presence to false when the client disconnects\\nonDisconnect(presenceRef).set(false).then(() => {\\n  console.log('OnDisconnect set up successfully');\\n}).catch((error) => {\\n  console.error('Error setting up onDisconnect:', error);\\n});\\n\\n// Set presence to true when the client is connected\\nset(presenceRef, true).then(() => {\\n  console.log('Presence set to true');\\n}).catch((error) => {\\n  console.error('Error setting presence:', error);\\n});\\n```\\n\\nThese examples cover basic operations such as setting and getting data, using transactions, listening for data changes, querying data, and handling disconnections. Adjust the Firebase configuration and paths as needed for your specific use case.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\",\"hash\":\"FnLpNRec6QsFylObiniI+5u5MS7hrHwT+LaiV8yIBmg=\"}","__type__":"DOCUMENT"},"firebase/firestore":{"__data__":"{\"id_\":\"firebase/firestore\",\"metadata\":{\"name\":\"firebase/firestore\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"text\":\"Sure! Here are some usage examples based on the provided TypeScript definitions for the Firebase Firestore library:\\n\\n### Example 1: Adding a Document to a Collection\\n\\n```typescript\\nimport { getFirestore, collection, addDoc } from 'firebase/firestore';\\n\\n// Initialize Firestore\\nconst db = getFirestore();\\n\\n// Reference to a collection\\nconst usersCollection = collection(db, 'users');\\n\\n// Data to add\\nconst userData = {\\n  name: 'John Doe',\\n  email: 'john.doe@example.com',\\n  age: 30\\n};\\n\\n// Add a new document with an auto-generated ID\\naddDoc(usersCollection, userData)\\n  .then((docRef) => {\\n    console.log('Document written with ID: ', docRef.id);\\n  })\\n  .catch((error) => {\\n    console.error('Error adding document: ', error);\\n  });\\n```\\n\\n### Example 2: Getting a Document\\n\\n```typescript\\nimport { getFirestore, doc, getDoc } from 'firebase/firestore';\\n\\n// Initialize Firestore\\nconst db = getFirestore();\\n\\n// Reference to a document\\nconst userDocRef = doc(db, 'users', 'user123');\\n\\n// Get the document\\ngetDoc(userDocRef)\\n  .then((docSnap) => {\\n    if (docSnap.exists()) {\\n      console.log('Document data:', docSnap.data());\\n    } else {\\n      console.log('No such document!');\\n    }\\n  })\\n  .catch((error) => {\\n    console.error('Error getting document: ', error);\\n  });\\n```\\n\\n### Example 3: Updating a Document\\n\\n```typescript\\nimport { getFirestore, doc, updateDoc } from 'firebase/firestore';\\n\\n// Initialize Firestore\\nconst db = getFirestore();\\n\\n// Reference to a document\\nconst userDocRef = doc(db, 'users', 'user123');\\n\\n// Data to update\\nconst updatedData = {\\n  age: 31\\n};\\n\\n// Update the document\\nupdateDoc(userDocRef, updatedData)\\n  .then(() => {\\n    console.log('Document successfully updated!');\\n  })\\n  .catch((error) => {\\n    console.error('Error updating document: ', error);\\n  });\\n```\\n\\n### Example 4: Deleting a Document\\n\\n```typescript\\nimport { getFirestore, doc, deleteDoc } from 'firebase/firestore';\\n\\n// Initialize Firestore\\nconst db = getFirestore();\\n\\n// Reference to a document\\nconst userDocRef = doc(db, 'users', 'user123');\\n\\n// Delete the document\\ndeleteDoc(userDocRef)\\n  .then(() => {\\n    console.log('Document successfully deleted!');\\n  })\\n  .catch((error) => {\\n    console.error('Error deleting document: ', error);\\n  });\\n```\\n\\n### Example 5: Querying a Collection\\n\\n```typescript\\nimport { getFirestore, collection, query, where, getDocs } from 'firebase/firestore';\\n\\n// Initialize Firestore\\nconst db = getFirestore();\\n\\n// Reference to a collection\\nconst usersCollection = collection(db, 'users');\\n\\n// Create a query against the collection\\nconst q = query(usersCollection, where('age', '>=', 30));\\n\\n// Execute the query\\ngetDocs(q)\\n  .then((querySnapshot) => {\\n    querySnapshot.forEach((doc) => {\\n      console.log(`${doc.id} => ${doc.data()}`);\\n    });\\n  })\\n  .catch((error) => {\\n    console.error('Error getting documents: ', error);\\n  });\\n```\\n\\n### Example 6: Using Transactions\\n\\n```typescript\\nimport { getFirestore, runTransaction, doc } from 'firebase/firestore';\\n\\n// Initialize Firestore\\nconst db = getFirestore();\\n\\n// Reference to a document\\nconst userDocRef = doc(db, 'users', 'user123');\\n\\n// Run a transaction\\nrunTransaction(db, async (transaction) => {\\n  const docSnap = await transaction.get(userDocRef);\\n  if (!docSnap.exists()) {\\n    throw 'Document does not exist!';\\n  }\\n\\n  const newAge = docSnap.data().age + 1;\\n  transaction.update(userDocRef, { age: newAge });\\n})\\n  .then(() => {\\n    console.log('Transaction successfully committed!');\\n  })\\n  .catch((error) => {\\n    console.error('Transaction failed: ', error);\\n  });\\n```\\n\\nThese examples cover basic CRUD operations, querying, and transactions using Firestore. You can adapt these examples to fit your specific use case.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\",\"hash\":\"cJCfDcGvX+oVLXLri1kYddNmjluZ1SkuRBWlu0rWdZY=\"}","__type__":"DOCUMENT"},"firebase/firestore/lite":{"__data__":"{\"id_\":\"firebase/firestore/lite\",\"metadata\":{\"name\":\"firebase/firestore/lite\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"text\":\"Certainly! The TypeScript definitions you provided indicate that the module re-exports everything from the `@firebase/firestore/lite` package. This means you can use all the functionalities provided by `@firebase/firestore/lite` through this module.\\n\\nHere are some usage examples for common functionalities provided by `@firebase/firestore/lite`:\\n\\n### Example 1: Initialize Firestore\\n```typescript\\nimport { initializeApp } from 'firebase/app';\\nimport { getFirestore } from 'firebase/firestore/lite';\\n\\n// Firebase configuration\\nconst firebaseConfig = {\\n  apiKey: \\\"your-api-key\\\",\\n  authDomain: \\\"your-auth-domain\\\",\\n  projectId: \\\"your-project-id\\\",\\n  storageBucket: \\\"your-storage-bucket\\\",\\n  messagingSenderId: \\\"your-messaging-sender-id\\\",\\n  appId: \\\"your-app-id\\\"\\n};\\n\\n// Initialize Firebase\\nconst app = initializeApp(firebaseConfig);\\n\\n// Initialize Firestore\\nconst db = getFirestore(app);\\n```\\n\\n### Example 2: Add a Document\\n```typescript\\nimport { collection, addDoc } from 'firebase/firestore/lite';\\n\\n// Reference to the collection\\nconst usersCollection = collection(db, 'users');\\n\\n// Add a new document with a generated ID\\nconst addUser = async () => {\\n  try {\\n    const docRef = await addDoc(usersCollection, {\\n      firstName: 'John',\\n      lastName: 'Doe',\\n      age: 30\\n    });\\n    console.log('Document written with ID: ', docRef.id);\\n  } catch (e) {\\n    console.error('Error adding document: ', e);\\n  }\\n};\\n\\naddUser();\\n```\\n\\n### Example 3: Get a Document\\n```typescript\\nimport { doc, getDoc } from 'firebase/firestore/lite';\\n\\n// Reference to a document\\nconst userDoc = doc(db, 'users', 'user-id');\\n\\n// Get a document\\nconst getUser = async () => {\\n  const docSnap = await getDoc(userDoc);\\n\\n  if (docSnap.exists()) {\\n    console.log('Document data:', docSnap.data());\\n  } else {\\n    console.log('No such document!');\\n  }\\n};\\n\\ngetUser();\\n```\\n\\n### Example 4: Update a Document\\n```typescript\\nimport { doc, updateDoc } from 'firebase/firestore/lite';\\n\\n// Reference to a document\\nconst userDoc = doc(db, 'users', 'user-id');\\n\\n// Update a document\\nconst updateUser = async () => {\\n  try {\\n    await updateDoc(userDoc, {\\n      age: 31\\n    });\\n    console.log('Document successfully updated!');\\n  } catch (e) {\\n    console.error('Error updating document: ', e);\\n  }\\n};\\n\\nupdateUser();\\n```\\n\\n### Example 5: Delete a Document\\n```typescript\\nimport { doc, deleteDoc } from 'firebase/firestore/lite';\\n\\n// Reference to a document\\nconst userDoc = doc(db, 'users', 'user-id');\\n\\n// Delete a document\\nconst deleteUser = async () => {\\n  try {\\n    await deleteDoc(userDoc);\\n    console.log('Document successfully deleted!');\\n  } catch (e) {\\n    console.error('Error deleting document: ', e);\\n  }\\n};\\n\\ndeleteUser();\\n```\\n\\nThese examples cover basic CRUD operations (Create, Read, Update, Delete) using Firestore Lite. Make sure to replace placeholders like `'your-api-key'`, `'your-auth-domain'`, `'your-project-id'`, etc., with your actual Firebase project configuration values.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\",\"hash\":\"GSem6zIhI2XF3Al8cFsdg9/9v6s9gdbZjKXLqqpvgzA=\"}","__type__":"DOCUMENT"},"firebase/functions":{"__data__":"{\"id_\":\"firebase/functions\",\"metadata\":{\"name\":\"firebase/functions\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"text\":\"Certainly! Below are some usage examples based on the provided TypeScript definitions for the Firebase Functions module.\\n\\n### Example 1: Initialize Firebase Functions and Call a Cloud Function\\n\\n```typescript\\nimport { initializeApp } from '@firebase/app';\\nimport { getFunctions, httpsCallable } from '@firebase/functions';\\n\\n// Initialize Firebase app\\nconst firebaseConfig = {\\n  apiKey: \\\"YOUR_API_KEY\\\",\\n  authDomain: \\\"YOUR_AUTH_DOMAIN\\\",\\n  projectId: \\\"YOUR_PROJECT_ID\\\",\\n  storageBucket: \\\"YOUR_STORAGE_BUCKET\\\",\\n  messagingSenderId: \\\"YOUR_MESSAGING_SENDER_ID\\\",\\n  appId: \\\"YOUR_APP_ID\\\"\\n};\\n\\nconst app = initializeApp(firebaseConfig);\\n\\n// Get a Functions instance\\nconst functions = getFunctions(app, 'us-central1');\\n\\n// Create a reference to the callable function\\nconst addMessage = httpsCallable<{ text: string }, { result: string }>(functions, 'addMessage');\\n\\n// Call the function\\naddMessage({ text: 'Hello, World!' })\\n  .then(result => {\\n    console.log('Function result:', result.data);\\n  })\\n  .catch(error => {\\n    console.error('Error calling function:', error);\\n  });\\n```\\n\\n### Example 2: Connect to the Functions Emulator\\n\\n```typescript\\nimport { initializeApp } from '@firebase/app';\\nimport { getFunctions, connectFunctionsEmulator, httpsCallable } from '@firebase/functions';\\n\\n// Initialize Firebase app\\nconst firebaseConfig = {\\n  apiKey: \\\"YOUR_API_KEY\\\",\\n  authDomain: \\\"YOUR_AUTH_DOMAIN\\\",\\n  projectId: \\\"YOUR_PROJECT_ID\\\",\\n  storageBucket: \\\"YOUR_STORAGE_BUCKET\\\",\\n  messagingSenderId: \\\"YOUR_MESSAGING_SENDER_ID\\\",\\n  appId: \\\"YOUR_APP_ID\\\"\\n};\\n\\nconst app = initializeApp(firebaseConfig);\\n\\n// Get a Functions instance\\nconst functions = getFunctions(app, 'us-central1');\\n\\n// Connect to the emulator\\nconnectFunctionsEmulator(functions, 'localhost', 5001);\\n\\n// Create a reference to the callable function\\nconst addMessage = httpsCallable<{ text: string }, { result: string }>(functions, 'addMessage');\\n\\n// Call the function\\naddMessage({ text: 'Hello, Emulator!' })\\n  .then(result => {\\n    console.log('Function result:', result.data);\\n  })\\n  .catch(error => {\\n    console.error('Error calling function:', error);\\n  });\\n```\\n\\n### Example 3: Handle Functions Errors\\n\\n```typescript\\nimport { initializeApp } from '@firebase/app';\\nimport { getFunctions, httpsCallable, FunctionsError } from '@firebase/functions';\\n\\n// Initialize Firebase app\\nconst firebaseConfig = {\\n  apiKey: \\\"YOUR_API_KEY\\\",\\n  authDomain: \\\"YOUR_AUTH_DOMAIN\\\",\\n  projectId: \\\"YOUR_PROJECT_ID\\\",\\n  storageBucket: \\\"YOUR_STORAGE_BUCKET\\\",\\n  messagingSenderId: \\\"YOUR_MESSAGING_SENDER_ID\\\",\\n  appId: \\\"YOUR_APP_ID\\\"\\n};\\n\\nconst app = initializeApp(firebaseConfig);\\n\\n// Get a Functions instance\\nconst functions = getFunctions(app, 'us-central1');\\n\\n// Create a reference to the callable function\\nconst addMessage = httpsCallable<{ text: string }, { result: string }>(functions, 'addMessage');\\n\\n// Call the function\\naddMessage({ text: 'Hello, Error Handling!' })\\n  .then(result => {\\n    console.log('Function result:', result.data);\\n  })\\n  .catch((error: FunctionsError) => {\\n    console.error('Error code:', error.code);\\n    console.error('Error message:', error.message);\\n    console.error('Error details:', error.details);\\n  });\\n```\\n\\n### Example 4: Using Custom Domain for Functions\\n\\n```typescript\\nimport { initializeApp } from '@firebase/app';\\nimport { getFunctions, httpsCallable } from '@firebase/functions';\\n\\n// Initialize Firebase app\\nconst firebaseConfig = {\\n  apiKey: \\\"YOUR_API_KEY\\\",\\n  authDomain: \\\"YOUR_AUTH_DOMAIN\\\",\\n  projectId: \\\"YOUR_PROJECT_ID\\\",\\n  storageBucket: \\\"YOUR_STORAGE_BUCKET\\\",\\n  messagingSenderId: \\\"YOUR_MESSAGING_SENDER_ID\\\",\\n  appId: \\\"YOUR_APP_ID\\\"\\n};\\n\\nconst app = initializeApp(firebaseConfig);\\n\\n// Get a Functions instance with a custom domain\\nconst functions = getFunctions(app, 'https://mycustomdomain.com');\\n\\n// Create a reference to the callable function\\nconst addMessage = httpsCallable<{ text: string }, { result: string }>(functions, 'addMessage');\\n\\n// Call the function\\naddMessage({ text: 'Hello, Custom Domain!' })\\n  .then(result => {\\n    console.log('Function result:', result.data);\\n  })\\n  .catch(error => {\\n    console.error('Error calling function:', error);\\n  });\\n```\\n\\nThese examples demonstrate how to initialize Firebase Functions, connect to the emulator, handle errors, and use a custom domain. Adjust the `firebaseConfig` and function names as per your Firebase project setup.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\",\"hash\":\"FSzXmZ3T4hdIjZmVRbcwtoh3w/6dryk+i672Rv1Q0Kk=\"}","__type__":"DOCUMENT"},"firebase/installations":{"__data__":"{\"id_\":\"firebase/installations\",\"metadata\":{\"name\":\"firebase/installations\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"text\":\"Certainly! Below are some usage examples based on the provided TypeScript definitions for the Firebase Installations SDK.\\n\\n### Example 1: Getting the Installation ID\\n\\n```typescript\\nimport { initializeApp } from '@firebase/app';\\nimport { getInstallations, getId } from '@firebase/installations';\\n\\n// Initialize Firebase app\\nconst firebaseConfig = {\\n  apiKey: \\\"YOUR_API_KEY\\\",\\n  authDomain: \\\"YOUR_AUTH_DOMAIN\\\",\\n  projectId: \\\"YOUR_PROJECT_ID\\\",\\n  storageBucket: \\\"YOUR_STORAGE_BUCKET\\\",\\n  messagingSenderId: \\\"YOUR_MESSAGING_SENDER_ID\\\",\\n  appId: \\\"YOUR_APP_ID\\\"\\n};\\n\\nconst app = initializeApp(firebaseConfig);\\n\\n// Get Installations instance\\nconst installations = getInstallations(app);\\n\\n// Get Installation ID\\ngetId(installations).then(installationId => {\\n  console.log('Installation ID:', installationId);\\n}).catch(error => {\\n  console.error('Error getting Installation ID:', error);\\n});\\n```\\n\\n### Example 2: Deleting the Installation\\n\\n```typescript\\nimport { initializeApp } from '@firebase/app';\\nimport { getInstallations, deleteInstallations } from '@firebase/installations';\\n\\n// Initialize Firebase app\\nconst firebaseConfig = {\\n  apiKey: \\\"YOUR_API_KEY\\\",\\n  authDomain: \\\"YOUR_AUTH_DOMAIN\\\",\\n  projectId: \\\"YOUR_PROJECT_ID\\\",\\n  storageBucket: \\\"YOUR_STORAGE_BUCKET\\\",\\n  messagingSenderId: \\\"YOUR_MESSAGING_SENDER_ID\\\",\\n  appId: \\\"YOUR_APP_ID\\\"\\n};\\n\\nconst app = initializeApp(firebaseConfig);\\n\\n// Get Installations instance\\nconst installations = getInstallations(app);\\n\\n// Delete Installation\\ndeleteInstallations(installations).then(() => {\\n  console.log('Installation deleted successfully.');\\n}).catch(error => {\\n  console.error('Error deleting Installation:', error);\\n});\\n```\\n\\n### Example 3: Getting the Auth Token\\n\\n```typescript\\nimport { initializeApp } from '@firebase/app';\\nimport { getInstallations, getToken } from '@firebase/installations';\\n\\n// Initialize Firebase app\\nconst firebaseConfig = {\\n  apiKey: \\\"YOUR_API_KEY\\\",\\n  authDomain: \\\"YOUR_AUTH_DOMAIN\\\",\\n  projectId: \\\"YOUR_PROJECT_ID\\\",\\n  storageBucket: \\\"YOUR_STORAGE_BUCKET\\\",\\n  messagingSenderId: \\\"YOUR_MESSAGING_SENDER_ID\\\",\\n  appId: \\\"YOUR_APP_ID\\\"\\n};\\n\\nconst app = initializeApp(firebaseConfig);\\n\\n// Get Installations instance\\nconst installations = getInstallations(app);\\n\\n// Get Auth Token\\ngetToken(installations).then(token => {\\n  console.log('Auth Token:', token);\\n}).catch(error => {\\n  console.error('Error getting Auth Token:', error);\\n});\\n```\\n\\n### Example 4: Listening for Installation ID Changes\\n\\n```typescript\\nimport { initializeApp } from '@firebase/app';\\nimport { getInstallations, onIdChange, IdChangeCallbackFn } from '@firebase/installations';\\n\\n// Initialize Firebase app\\nconst firebaseConfig = {\\n  apiKey: \\\"YOUR_API_KEY\\\",\\n  authDomain: \\\"YOUR_AUTH_DOMAIN\\\",\\n  projectId: \\\"YOUR_PROJECT_ID\\\",\\n  storageBucket: \\\"YOUR_STORAGE_BUCKET\\\",\\n  messagingSenderId: \\\"YOUR_MESSAGING_SENDER_ID\\\",\\n  appId: \\\"YOUR_APP_ID\\\"\\n};\\n\\nconst app = initializeApp(firebaseConfig);\\n\\n// Get Installations instance\\nconst installations = getInstallations(app);\\n\\n// Define the callback function\\nconst idChangeCallback: IdChangeCallbackFn = (installationId: string) => {\\n  console.log('Installation ID changed:', installationId);\\n};\\n\\n// Set the callback to listen for ID changes\\nconst unsubscribe = onIdChange(installations, idChangeCallback);\\n\\n// Later, you can unsubscribe from the changes\\n// unsubscribe();\\n```\\n\\nThese examples demonstrate how to initialize the Firebase app, get the Installations instance, retrieve the Installation ID, delete the Installation, get the auth token, and listen for Installation ID changes using the Firebase Installations SDK. Make sure to replace `\\\"YOUR_*\\\"` placeholders with your actual Firebase project configuration values.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\",\"hash\":\"V7e/mSElF0lBSMEXGGDph0snpJq2hPeVxBjTfn1C3L8=\"}","__type__":"DOCUMENT"},"firebase/messaging":{"__data__":"{\"id_\":\"firebase/messaging\",\"metadata\":{\"name\":\"firebase/messaging\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"text\":\"Certainly! Here are some usage examples based on the provided TypeScript definitions for Firebase Cloud Messaging (FCM):\\n\\n### Example 1: Initializing Firebase and Getting a Messaging Instance\\n\\n```typescript\\nimport { initializeApp } from '@firebase/app';\\nimport { getMessaging } from '@firebase/messaging';\\n\\n// Your web app's Firebase configuration\\nconst firebaseConfig = {\\n  apiKey: \\\"YOUR_API_KEY\\\",\\n  authDomain: \\\"YOUR_AUTH_DOMAIN\\\",\\n  projectId: \\\"YOUR_PROJECT_ID\\\",\\n  storageBucket: \\\"YOUR_STORAGE_BUCKET\\\",\\n  messagingSenderId: \\\"YOUR_MESSAGING_SENDER_ID\\\",\\n  appId: \\\"YOUR_APP_ID\\\"\\n};\\n\\n// Initialize Firebase\\nconst app = initializeApp(firebaseConfig);\\n\\n// Get a Messaging instance\\nconst messaging = getMessaging(app);\\n```\\n\\n### Example 2: Requesting Permission and Getting a Token\\n\\n```typescript\\nimport { getToken } from '@firebase/messaging';\\n\\nasync function requestPermissionAndGetToken(messaging: Messaging) {\\n  try {\\n    const token = await getToken(messaging, { vapidKey: 'YOUR_VAPID_KEY' });\\n    console.log('FCM Registration Token:', token);\\n  } catch (error) {\\n    console.error('Error getting token:', error);\\n  }\\n}\\n\\n// Assuming `messaging` is already initialized\\nrequestPermissionAndGetToken(messaging);\\n```\\n\\n### Example 3: Handling Incoming Messages\\n\\n```typescript\\nimport { onMessage } from '@firebase/messaging';\\n\\nonMessage(messaging, (payload) => {\\n  console.log('Message received. ', payload);\\n  // Customize notification here\\n  const notificationTitle = payload.notification?.title || 'Default Title';\\n  const notificationOptions = {\\n    body: payload.notification?.body,\\n    icon: payload.notification?.icon\\n  };\\n\\n  if (Notification.permission === 'granted') {\\n    new Notification(notificationTitle, notificationOptions);\\n  }\\n});\\n```\\n\\n### Example 4: Deleting a Token\\n\\n```typescript\\nimport { deleteToken } from '@firebase/messaging';\\n\\nasync function removeToken(messaging: Messaging) {\\n  try {\\n    const result = await deleteToken(messaging);\\n    console.log('Token deleted:', result);\\n  } catch (error) {\\n    console.error('Error deleting token:', error);\\n  }\\n}\\n\\n// Assuming `messaging` is already initialized\\nremoveToken(messaging);\\n```\\n\\n### Example 5: Checking Browser Support\\n\\n```typescript\\nimport { isSupported } from '@firebase/messaging';\\n\\nasync function checkSupport() {\\n  const supported = await isSupported();\\n  if (supported) {\\n    console.log('Browser supports Firebase Cloud Messaging.');\\n  } else {\\n    console.log('Browser does not support Firebase Cloud Messaging.');\\n  }\\n}\\n\\ncheckSupport();\\n```\\n\\n### Example 6: Enabling BigQuery Export for Delivery Metrics\\n\\n```typescript\\nimport { experimentalSetDeliveryMetricsExportedToBigQueryEnabled } from '@firebase/messaging';\\n\\nfunction enableBigQueryExport(messaging: Messaging, enable: boolean) {\\n  experimentalSetDeliveryMetricsExportedToBigQueryEnabled(messaging, enable);\\n  console.log(`BigQuery export ${enable ? 'enabled' : 'disabled'}.`);\\n}\\n\\n// Assuming `messaging` is already initialized\\nenableBigQueryExport(messaging, true);\\n```\\n\\nThese examples cover initializing Firebase, requesting permissions, handling messages, deleting tokens, checking browser support, and enabling BigQuery export for delivery metrics. Adjust the configuration and parameters as needed for your specific use case.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\",\"hash\":\"ZE01zY4RCm1LBshfnVnjKOTxNA0iMAjOXJJVABZtjJM=\"}","__type__":"DOCUMENT"},"firebase/messaging/sw":{"__data__":"{\"id_\":\"firebase/messaging/sw\",\"metadata\":{\"name\":\"firebase/messaging/sw\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"text\":\"Certainly! The TypeScript definitions you provided indicate that the module re-exports everything from the `@firebase/messaging/sw` module. This module is typically used for Firebase Cloud Messaging (FCM) in service workers. Below are some usage examples for common tasks you might perform with Firebase Cloud Messaging in a service worker context.\\n\\n### 1. Setting Up Firebase in a Service Worker\\n\\nFirst, you need to import and initialize Firebase in your service worker file (e.g., `firebase-messaging-sw.js`).\\n\\n```typescript\\nimportScripts('https://www.gstatic.com/firebasejs/9.0.0/firebase-app-compat.js');\\nimportScripts('https://www.gstatic.com/firebasejs/9.0.0/firebase-messaging-compat.js');\\n\\n// Your Firebase configuration object\\nconst firebaseConfig = {\\n  apiKey: \\\"YOUR_API_KEY\\\",\\n  authDomain: \\\"YOUR_AUTH_DOMAIN\\\",\\n  projectId: \\\"YOUR_PROJECT_ID\\\",\\n  storageBucket: \\\"YOUR_STORAGE_BUCKET\\\",\\n  messagingSenderId: \\\"YOUR_MESSAGING_SENDER_ID\\\",\\n  appId: \\\"YOUR_APP_ID\\\",\\n  measurementId: \\\"YOUR_MEASUREMENT_ID\\\"\\n};\\n\\n// Initialize Firebase\\nfirebase.initializeApp(firebaseConfig);\\n\\n// Retrieve an instance of Firebase Messaging so that it can handle background messages\\nconst messaging = firebase.messaging();\\n```\\n\\n### 2. Handling Background Messages\\n\\nTo handle background messages, you can use the `onBackgroundMessage` method provided by Firebase Messaging.\\n\\n```typescript\\nmessaging.onBackgroundMessage((payload) => {\\n  console.log('[firebase-messaging-sw.js] Received background message ', payload);\\n  // Customize notification here\\n  const notificationTitle = 'Background Message Title';\\n  const notificationOptions = {\\n    body: 'Background Message body.',\\n    icon: '/firebase-logo.png'\\n  };\\n\\n  self.registration.showNotification(notificationTitle, notificationOptions);\\n});\\n```\\n\\n### 3. Handling Notification Clicks\\n\\nYou can also handle notification click events in your service worker.\\n\\n```typescript\\nself.addEventListener('notificationclick', (event) => {\\n  console.log('[firebase-messaging-sw.js] Notification click Received.');\\n\\n  event.notification.close();\\n\\n  event.waitUntil(\\n    clients.openWindow('https://www.example.com')\\n  );\\n});\\n```\\n\\n### 4. Requesting Permission in the Main Application\\n\\nIn your main application file (e.g., `app.js`), you need to request permission to show notifications and get the FCM token.\\n\\n```typescript\\nimport { getMessaging, getToken, onMessage } from \\\"firebase/messaging\\\";\\n\\n// Initialize Firebase in your main application\\nconst firebaseConfig = {\\n  apiKey: \\\"YOUR_API_KEY\\\",\\n  authDomain: \\\"YOUR_AUTH_DOMAIN\\\",\\n  projectId: \\\"YOUR_PROJECT_ID\\\",\\n  storageBucket: \\\"YOUR_STORAGE_BUCKET\\\",\\n  messagingSenderId: \\\"YOUR_MESSAGING_SENDER_ID\\\",\\n  appId: \\\"YOUR_APP_ID\\\",\\n  measurementId: \\\"YOUR_MEASUREMENT_ID\\\"\\n};\\n\\nconst app = initializeApp(firebaseConfig);\\nconst messaging = getMessaging(app);\\n\\n// Request permission to show notifications\\nNotification.requestPermission().then((permission) => {\\n  if (permission === 'granted') {\\n    console.log('Notification permission granted.');\\n    // Get the FCM token\\n    getToken(messaging, { vapidKey: 'YOUR_PUBLIC_VAPID_KEY' }).then((currentToken) => {\\n      if (currentToken) {\\n        console.log('FCM Token:', currentToken);\\n        // Send the token to your server and update the UI if necessary\\n      } else {\\n        console.log('No registration token available. Request permission to generate one.');\\n      }\\n    }).catch((err) => {\\n      console.log('An error occurred while retrieving token. ', err);\\n    });\\n  } else {\\n    console.log('Unable to get permission to notify.');\\n  }\\n});\\n\\n// Handle incoming messages\\nonMessage(messaging, (payload) => {\\n  console.log('Message received. ', payload);\\n  // Customize notification here\\n});\\n```\\n\\nThese examples should help you get started with Firebase Cloud Messaging in a service worker context. Make sure to replace placeholder values (like `YOUR_API_KEY`, `YOUR_PROJECT_ID`, etc.) with your actual Firebase project configuration values.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\",\"hash\":\"ot7pen/eKPlT6ydvkIweaoBChR5eEX1l74X6XMqXjoc=\"}","__type__":"DOCUMENT"},"firebase/performance":{"__data__":"{\"id_\":\"firebase/performance\",\"metadata\":{\"name\":\"firebase/performance\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"text\":\"Certainly! Below are some usage examples based on the provided TypeScript definitions for the Firebase Performance Monitoring Web SDK.\\n\\n### Example 1: Initialize Firebase Performance Monitoring\\n\\n```typescript\\nimport { initializeApp } from '@firebase/app';\\nimport { initializePerformance, PerformanceSettings } from '@firebase/performance';\\n\\n// Initialize Firebase app\\nconst firebaseConfig = {\\n  apiKey: \\\"YOUR_API_KEY\\\",\\n  authDomain: \\\"YOUR_AUTH_DOMAIN\\\",\\n  projectId: \\\"YOUR_PROJECT_ID\\\",\\n  storageBucket: \\\"YOUR_STORAGE_BUCKET\\\",\\n  messagingSenderId: \\\"YOUR_MESSAGING_SENDER_ID\\\",\\n  appId: \\\"YOUR_APP_ID\\\"\\n};\\n\\nconst app = initializeApp(firebaseConfig);\\n\\n// Optional settings for performance monitoring\\nconst settings: PerformanceSettings = {\\n  instrumentationEnabled: true,\\n  dataCollectionEnabled: true\\n};\\n\\n// Initialize performance monitoring\\nconst performance = initializePerformance(app, settings);\\n```\\n\\n### Example 2: Get Firebase Performance Instance\\n\\n```typescript\\nimport { initializeApp } from '@firebase/app';\\nimport { getPerformance } from '@firebase/performance';\\n\\n// Initialize Firebase app\\nconst firebaseConfig = {\\n  apiKey: \\\"YOUR_API_KEY\\\",\\n  authDomain: \\\"YOUR_AUTH_DOMAIN\\\",\\n  projectId: \\\"YOUR_PROJECT_ID\\\",\\n  storageBucket: \\\"YOUR_STORAGE_BUCKET\\\",\\n  messagingSenderId: \\\"YOUR_MESSAGING_SENDER_ID\\\",\\n  appId: \\\"YOUR_APP_ID\\\"\\n};\\n\\nconst app = initializeApp(firebaseConfig);\\n\\n// Get performance instance\\nconst performance = getPerformance(app);\\n```\\n\\n### Example 3: Create and Use a Performance Trace\\n\\n```typescript\\nimport { initializeApp } from '@firebase/app';\\nimport { getPerformance, trace } from '@firebase/performance';\\n\\n// Initialize Firebase app\\nconst firebaseConfig = {\\n  apiKey: \\\"YOUR_API_KEY\\\",\\n  authDomain: \\\"YOUR_AUTH_DOMAIN\\\",\\n  projectId: \\\"YOUR_PROJECT_ID\\\",\\n  storageBucket: \\\"YOUR_STORAGE_BUCKET\\\",\\n  messagingSenderId: \\\"YOUR_MESSAGING_SENDER_ID\\\",\\n  appId: \\\"YOUR_APP_ID\\\"\\n};\\n\\nconst app = initializeApp(firebaseConfig);\\n\\n// Get performance instance\\nconst performance = getPerformance(app);\\n\\n// Create a new trace\\nconst myTrace = trace(performance, 'my_custom_trace');\\n\\n// Start the trace\\nmyTrace.start();\\n\\n// Perform some operations\\n// ...\\n\\n// Stop the trace\\nmyTrace.stop();\\n```\\n\\n### Example 4: Using Performance Monitoring with Default Settings\\n\\n```typescript\\nimport { initializeApp } from '@firebase/app';\\nimport { initializePerformance } from '@firebase/performance';\\n\\n// Initialize Firebase app\\nconst firebaseConfig = {\\n  apiKey: \\\"YOUR_API_KEY\\\",\\n  authDomain: \\\"YOUR_AUTH_DOMAIN\\\",\\n  projectId: \\\"YOUR_PROJECT_ID\\\",\\n  storageBucket: \\\"YOUR_STORAGE_BUCKET\\\",\\n  messagingSenderId: \\\"YOUR_MESSAGING_SENDER_ID\\\",\\n  appId: \\\"YOUR_APP_ID\\\"\\n};\\n\\nconst app = initializeApp(firebaseConfig);\\n\\n// Initialize performance monitoring with default settings\\nconst performance = initializePerformance(app);\\n```\\n\\nThese examples demonstrate how to initialize Firebase Performance Monitoring, get a performance instance, create and use performance traces, and use performance monitoring with default settings. Make sure to replace `\\\"YOUR_API_KEY\\\"`, `\\\"YOUR_AUTH_DOMAIN\\\"`, etc., with your actual Firebase project configuration values.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\",\"hash\":\"A4kh+5bi1AB+zprPTih8iCc6jSlp6PedPgzhX40WRNg=\"}","__type__":"DOCUMENT"},"firebase/remote-config":{"__data__":"{\"id_\":\"firebase/remote-config\",\"metadata\":{\"name\":\"firebase/remote-config\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"text\":\"Certainly! Below are some usage examples based on the provided TypeScript definitions for the Firebase Remote Config Web SDK.\\n\\n### Example 1: Initializing Remote Config and Fetching Configurations\\n\\n```typescript\\nimport { initializeApp } from '@firebase/app';\\nimport { getRemoteConfig, fetchAndActivate, getString, getBoolean, getNumber } from '@firebase/remote-config';\\n\\n// Initialize Firebase app\\nconst firebaseConfig = {\\n  apiKey: \\\"YOUR_API_KEY\\\",\\n  authDomain: \\\"YOUR_AUTH_DOMAIN\\\",\\n  projectId: \\\"YOUR_PROJECT_ID\\\",\\n  storageBucket: \\\"YOUR_STORAGE_BUCKET\\\",\\n  messagingSenderId: \\\"YOUR_MESSAGING_SENDER_ID\\\",\\n  appId: \\\"YOUR_APP_ID\\\"\\n};\\n\\nconst app = initializeApp(firebaseConfig);\\n\\n// Get Remote Config instance\\nconst remoteConfig = getRemoteConfig(app);\\n\\n// Set minimum fetch interval to 1 hour\\nremoteConfig.settings = {\\n  minimumFetchIntervalMillis: 3600000,\\n  fetchTimeoutMillis: 60000\\n};\\n\\n// Fetch and activate the remote config\\nfetchAndActivate(remoteConfig)\\n  .then((activated) => {\\n    if (activated) {\\n      console.log('Fetched and activated remote config.');\\n    } else {\\n      console.log('Remote config was already activated.');\\n    }\\n\\n    // Get values from remote config\\n    const welcomeMessage = getString(remoteConfig, 'welcome_message');\\n    const showFeatureX = getBoolean(remoteConfig, 'show_feature_x');\\n    const maxItems = getNumber(remoteConfig, 'max_items');\\n\\n    console.log(`Welcome Message: ${welcomeMessage}`);\\n    console.log(`Show Feature X: ${showFeatureX}`);\\n    console.log(`Max Items: ${maxItems}`);\\n  })\\n  .catch((err) => {\\n    console.error('Error fetching remote config:', err);\\n  });\\n```\\n\\n### Example 2: Setting Default Configurations and Fetching Config\\n\\n```typescript\\nimport { initializeApp } from '@firebase/app';\\nimport { getRemoteConfig, fetchConfig, getAll } from '@firebase/remote-config';\\n\\n// Initialize Firebase app\\nconst firebaseConfig = {\\n  apiKey: \\\"YOUR_API_KEY\\\",\\n  authDomain: \\\"YOUR_AUTH_DOMAIN\\\",\\n  projectId: \\\"YOUR_PROJECT_ID\\\",\\n  storageBucket: \\\"YOUR_STORAGE_BUCKET\\\",\\n  messagingSenderId: \\\"YOUR_MESSAGING_SENDER_ID\\\",\\n  appId: \\\"YOUR_APP_ID\\\"\\n};\\n\\nconst app = initializeApp(firebaseConfig);\\n\\n// Get Remote Config instance\\nconst remoteConfig = getRemoteConfig(app);\\n\\n// Set default config values\\nremoteConfig.defaultConfig = {\\n  'welcome_message': 'Welcome to our app!',\\n  'show_feature_x': false,\\n  'max_items': 10\\n};\\n\\n// Fetch the remote config\\nfetchConfig(remoteConfig)\\n  .then(() => {\\n    console.log('Fetched remote config.');\\n\\n    // Get all config values\\n    const allConfig = getAll(remoteConfig);\\n    console.log('All Config:', allConfig);\\n  })\\n  .catch((err) => {\\n    console.error('Error fetching remote config:', err);\\n  });\\n```\\n\\n### Example 3: Checking Support for Remote Config\\n\\n```typescript\\nimport { isSupported } from '@firebase/remote-config';\\n\\nisSupported()\\n  .then((supported) => {\\n    if (supported) {\\n      console.log('Remote Config is supported in this environment.');\\n    } else {\\n      console.log('Remote Config is not supported in this environment.');\\n    }\\n  })\\n  .catch((err) => {\\n    console.error('Error checking Remote Config support:', err);\\n  });\\n```\\n\\n### Example 4: Setting Log Level for Remote Config\\n\\n```typescript\\nimport { initializeApp } from '@firebase/app';\\nimport { getRemoteConfig, setLogLevel } from '@firebase/remote-config';\\n\\n// Initialize Firebase app\\nconst firebaseConfig = {\\n  apiKey: \\\"YOUR_API_KEY\\\",\\n  authDomain: \\\"YOUR_AUTH_DOMAIN\\\",\\n  projectId: \\\"YOUR_PROJECT_ID\\\",\\n  storageBucket: \\\"YOUR_STORAGE_BUCKET\\\",\\n  messagingSenderId: \\\"YOUR_MESSAGING_SENDER_ID\\\",\\n  appId: \\\"YOUR_APP_ID\\\"\\n};\\n\\nconst app = initializeApp(firebaseConfig);\\n\\n// Get Remote Config instance\\nconst remoteConfig = getRemoteConfig(app);\\n\\n// Set log level to debug\\nsetLogLevel(remoteConfig, 'debug');\\n```\\n\\nThese examples cover initializing the Firebase app, configuring and using the Remote Config SDK, fetching and activating configurations, checking support, and setting log levels. Adjust the `firebaseConfig` object with your actual Firebase project credentials.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\",\"hash\":\"95/FXAsrbavXep0xzi10AIUL2QzgkYvC8aLaZ1gOIFA=\"}","__type__":"DOCUMENT"},"firebase/storage":{"__data__":"{\"id_\":\"firebase/storage\",\"metadata\":{\"name\":\"firebase/storage\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"text\":\"Sure, here are some usage examples based on the TypeScript definitions provided for the Firebase Storage module:\\n\\n### Example 1: Initialize Firebase Storage and Upload a File\\n\\n```typescript\\nimport { initializeApp } from '@firebase/app';\\nimport { getStorage, ref, uploadBytes } from '@firebase/storage';\\n\\n// Initialize Firebase\\nconst firebaseConfig = {\\n  apiKey: \\\"YOUR_API_KEY\\\",\\n  authDomain: \\\"YOUR_AUTH_DOMAIN\\\",\\n  projectId: \\\"YOUR_PROJECT_ID\\\",\\n  storageBucket: \\\"YOUR_STORAGE_BUCKET\\\",\\n  messagingSenderId: \\\"YOUR_MESSAGING_SENDER_ID\\\",\\n  appId: \\\"YOUR_APP_ID\\\"\\n};\\n\\nconst app = initializeApp(firebaseConfig);\\n\\n// Get a reference to the storage service\\nconst storage = getStorage(app);\\n\\n// Create a storage reference from our storage service\\nconst storageRef = ref(storage, 'some-child');\\n\\n// Create a file to upload\\nconst file = new Blob(['Hello, world!'], { type: 'text/plain' });\\n\\n// Upload the file\\nuploadBytes(storageRef, file).then((snapshot) => {\\n  console.log('Uploaded a blob or file!', snapshot);\\n});\\n```\\n\\n### Example 2: Download a File as a Blob\\n\\n```typescript\\nimport { getBlob, ref, getStorage } from '@firebase/storage';\\n\\n// Initialize Firebase (assuming firebaseConfig and app are already defined)\\nconst storage = getStorage(app);\\n\\n// Create a reference to the file we want to download\\nconst storageRef = ref(storage, 'some-child');\\n\\n// Get the file as a Blob\\ngetBlob(storageRef).then((blob) => {\\n  console.log('Downloaded blob:', blob);\\n  // Do something with the blob\\n}).catch((error) => {\\n  console.error('Error downloading blob:', error);\\n});\\n```\\n\\n### Example 3: Get a Download URL\\n\\n```typescript\\nimport { getDownloadURL, ref, getStorage } from '@firebase/storage';\\n\\n// Initialize Firebase (assuming firebaseConfig and app are already defined)\\nconst storage = getStorage(app);\\n\\n// Create a reference to the file we want to download\\nconst storageRef = ref(storage, 'some-child');\\n\\n// Get the download URL\\ngetDownloadURL(storageRef).then((url) => {\\n  console.log('File available at', url);\\n  // Use the URL to download the file or display it in an <img> tag\\n}).catch((error) => {\\n  console.error('Error getting download URL:', error);\\n});\\n```\\n\\n### Example 4: List All Files in a Directory\\n\\n```typescript\\nimport { listAll, ref, getStorage } from '@firebase/storage';\\n\\n// Initialize Firebase (assuming firebaseConfig and app are already defined)\\nconst storage = getStorage(app);\\n\\n// Create a reference to the directory we want to list\\nconst listRef = ref(storage, 'some-directory');\\n\\n// List all files and directories under the directory\\nlistAll(listRef).then((res) => {\\n  res.prefixes.forEach((folderRef) => {\\n    // All the prefixes under listRef.\\n    // You may call listAll() recursively on them.\\n    console.log('Folder:', folderRef.name);\\n  });\\n  res.items.forEach((itemRef) => {\\n    // All the items under listRef.\\n    console.log('File:', itemRef.name);\\n  });\\n}).catch((error) => {\\n  console.error('Error listing files:', error);\\n});\\n```\\n\\n### Example 5: Delete a File\\n\\n```typescript\\nimport { deleteObject, ref, getStorage } from '@firebase/storage';\\n\\n// Initialize Firebase (assuming firebaseConfig and app are already defined)\\nconst storage = getStorage(app);\\n\\n// Create a reference to the file we want to delete\\nconst fileRef = ref(storage, 'some-child');\\n\\n// Delete the file\\ndeleteObject(fileRef).then(() => {\\n  console.log('File deleted successfully');\\n}).catch((error) => {\\n  console.error('Error deleting file:', error);\\n});\\n```\\n\\n### Example 6: Upload a String\\n\\n```typescript\\nimport { uploadString, ref, getStorage, StringFormat } from '@firebase/storage';\\n\\n// Initialize Firebase (assuming firebaseConfig and app are already defined)\\nconst storage = getStorage(app);\\n\\n// Create a reference to the file we want to upload\\nconst stringRef = ref(storage, 'some-child');\\n\\n// Upload a string\\nconst data = 'Hello, world!';\\nuploadString(stringRef, data, StringFormat.RAW).then((snapshot) => {\\n  console.log('Uploaded a string!', snapshot);\\n}).catch((error) => {\\n  console.error('Error uploading string:', error);\\n});\\n```\\n\\nThese examples cover some of the basic operations you can perform with Firebase Storage, such as uploading files, downloading files, getting download URLs, listing files, and deleting files.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\",\"hash\":\"BGt51WVGiwu4BoEtwOIXehbrbK7YhE0IVghlDS6khsI=\"}","__type__":"DOCUMENT"},"firebase/vertexai-preview":{"__data__":"{\"id_\":\"firebase/vertexai-preview\",\"metadata\":{\"name\":\"firebase/vertexai-preview\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"text\":\"Sure! Here are some usage examples based on the provided TypeScript definitions for the Firebase Vertex AI SDK:\\n\\n### Example 1: Initializing Vertex AI and Generative Model\\n\\n```typescript\\nimport { getVertexAI, getGenerativeModel, VertexAI, GenerativeModel, GenerateContentRequest, GenerateContentResult } from 'firebase';\\n\\n// Initialize Firebase app (assuming you have already set up Firebase)\\nimport { initializeApp } from 'firebase/app';\\nconst firebaseConfig = {\\n  apiKey: \\\"YOUR_API_KEY\\\",\\n  authDomain: \\\"YOUR_AUTH_DOMAIN\\\",\\n  projectId: \\\"YOUR_PROJECT_ID\\\",\\n  storageBucket: \\\"YOUR_STORAGE_BUCKET\\\",\\n  messagingSenderId: \\\"YOUR_MESSAGING_SENDER_ID\\\",\\n  appId: \\\"YOUR_APP_ID\\\"\\n};\\nconst app = initializeApp(firebaseConfig);\\n\\n// Initialize Vertex AI\\nconst vertexAI: VertexAI = getVertexAI(app, { location: 'us-central1' });\\n\\n// Initialize Generative Model\\nconst modelParams = {\\n  model: 'text-davinci-003',\\n  generationConfig: {\\n    maxOutputTokens: 100,\\n    temperature: 0.7\\n  }\\n};\\nconst generativeModel: GenerativeModel = getGenerativeModel(vertexAI, modelParams);\\n\\n// Generate content\\nconst request: GenerateContentRequest = {\\n  contents: [{ role: 'user', parts: [{ text: 'Tell me a joke.' }] }]\\n};\\n\\ngenerativeModel.generateContent(request).then((result: GenerateContentResult) => {\\n  console.log(result.response.text());\\n}).catch((error) => {\\n  console.error('Error generating content:', error);\\n});\\n```\\n\\n### Example 2: Using ChatSession for Multi-turn Conversations\\n\\n```typescript\\nimport { getVertexAI, getGenerativeModel, VertexAI, ChatSession, StartChatParams, GenerateContentResult } from 'firebase';\\n\\n// Initialize Firebase app (assuming you have already set up Firebase)\\nimport { initializeApp } from 'firebase/app';\\nconst firebaseConfig = {\\n  apiKey: \\\"YOUR_API_KEY\\\",\\n  authDomain: \\\"YOUR_AUTH_DOMAIN\\\",\\n  projectId: \\\"YOUR_PROJECT_ID\\\",\\n  storageBucket: \\\"YOUR_STORAGE_BUCKET\\\",\\n  messagingSenderId: \\\"YOUR_MESSAGING_SENDER_ID\\\",\\n  appId: \\\"YOUR_APP_ID\\\"\\n};\\nconst app = initializeApp(firebaseConfig);\\n\\n// Initialize Vertex AI\\nconst vertexAI: VertexAI = getVertexAI(app, { location: 'us-central1' });\\n\\n// Initialize Generative Model\\nconst modelParams = {\\n  model: 'text-davinci-003',\\n  generationConfig: {\\n    maxOutputTokens: 100,\\n    temperature: 0.7\\n  }\\n};\\nconst generativeModel = getGenerativeModel(vertexAI, modelParams);\\n\\n// Start a chat session\\nconst startChatParams: StartChatParams = {\\n  history: [{ role: 'user', parts: [{ text: 'Hello, how are you?' }] }]\\n};\\nconst chatSession: ChatSession = generativeModel.startChat(startChatParams);\\n\\n// Send a message in the chat session\\nchatSession.sendMessage('What is the weather like today?').then((result: GenerateContentResult) => {\\n  console.log(result.response.text());\\n}).catch((error) => {\\n  console.error('Error sending message:', error);\\n});\\n```\\n\\n### Example 3: Counting Tokens in a Request\\n\\n```typescript\\nimport { getVertexAI, getGenerativeModel, VertexAI, GenerativeModel, CountTokensRequest, CountTokensResponse } from 'firebase';\\n\\n// Initialize Firebase app (assuming you have already set up Firebase)\\nimport { initializeApp } from 'firebase/app';\\nconst firebaseConfig = {\\n  apiKey: \\\"YOUR_API_KEY\\\",\\n  authDomain: \\\"YOUR_AUTH_DOMAIN\\\",\\n  projectId: \\\"YOUR_PROJECT_ID\\\",\\n  storageBucket: \\\"YOUR_STORAGE_BUCKET\\\",\\n  messagingSenderId: \\\"YOUR_MESSAGING_SENDER_ID\\\",\\n  appId: \\\"YOUR_APP_ID\\\"\\n};\\nconst app = initializeApp(firebaseConfig);\\n\\n// Initialize Vertex AI\\nconst vertexAI: VertexAI = getVertexAI(app, { location: 'us-central1' });\\n\\n// Initialize Generative Model\\nconst modelParams = {\\n  model: 'text-davinci-003',\\n  generationConfig: {\\n    maxOutputTokens: 100,\\n    temperature: 0.7\\n  }\\n};\\nconst generativeModel: GenerativeModel = getGenerativeModel(vertexAI, modelParams);\\n\\n// Count tokens in a request\\nconst countTokensRequest: CountTokensRequest = {\\n  contents: [{ role: 'user', parts: [{ text: 'How many tokens does this sentence have?' }] }]\\n};\\n\\ngenerativeModel.countTokens(countTokensRequest).then((response: CountTokensResponse) => {\\n  console.log('Total tokens:', response.totalTokens);\\n}).catch((error) => {\\n  console.error('Error counting tokens:', error);\\n});\\n```\\n\\n### Example 4: Handling Function Calls in Responses\\n\\n```typescript\\nimport { getVertexAI, getGenerativeModel, VertexAI, GenerativeModel, GenerateContentRequest, GenerateContentResult, FunctionDeclaration, FunctionResponse } from 'firebase';\\n\\n// Initialize Firebase app (assuming you have already set up Firebase)\\nimport { initializeApp } from 'firebase/app';\\nconst firebaseConfig = {\\n  apiKey: \\\"YOUR_API_KEY\\\",\\n  authDomain: \\\"YOUR_AUTH_DOMAIN\\\",\\n  projectId: \\\"YOUR_PROJECT_ID\\\",\\n  storageBucket: \\\"YOUR_STORAGE_BUCKET\\\",\\n  messagingSenderId: \\\"YOUR_MESSAGING_SENDER_ID\\\",\\n  appId: \\\"YOUR_APP_ID\\\"\\n};\\nconst app = initializeApp(firebaseConfig);\\n\\n// Initialize Vertex AI\\nconst vertexAI: VertexAI = getVertexAI(app, { location: 'us-central1' });\\n\\n// Initialize Generative Model\\nconst modelParams = {\\n  model: 'text-davinci-003',\\n  generationConfig: {\\n    maxOutputTokens: 100,\\n    temperature: 0.7\\n  },\\n  tools: [{\\n    functionDeclarations: [{\\n      name: 'getWeather',\\n      description: 'Fetches the current weather for a given location',\\n      parameters: {\\n        type: 'object',\\n        properties: {\\n          location: { type: 'string', description: 'The location to fetch weather for' }\\n        },\\n        required: ['location']\\n      }\\n    }]\\n  }]\\n};\\nconst generativeModel: GenerativeModel = getGenerativeModel(vertexAI, modelParams);\\n\\n// Generate content with function call\\nconst request: GenerateContentRequest = {\\n  contents: [{ role: 'user', parts: [{ text: 'What is the weather like in New York?' }] }]\\n};\\n\\ngenerativeModel.generateContent(request).then((result: GenerateContentResult) => {\\n  const functionCalls = result.response.functionCalls();\\n  if (functionCalls) {\\n    functionCalls.forEach((funcCall) => {\\n      if (funcCall.name === 'getWeather') {\\n        // Handle the function call, e.g., fetch weather data from an API\\n        const weatherData = { temperature: '20°C', condition: 'Sunny' };\\n        const functionResponse: FunctionResponse = {\\n          name: 'getWeather',\\n          response: weatherData\\n        };\\n        \\n        // Send the function response back to the model\\n        const responseRequest: GenerateContentRequest = {\\n          contents: [{ role: 'function', parts: [{ functionResponse }] }]\\n        };\\n        \\n        generativeModel.generateContent(responseRequest).then((finalResult: GenerateContentResult) => {\\n          console.log(finalResult.response.text());\\n        });\\n      }\\n    });\\n  }\\n}).catch((error) => {\\n  console.error('Error generating content:', error);\\n});\\n```\\n\\nThese examples demonstrate how to initialize the Vertex AI SDK, create generative models, handle multi-turn chat sessions, count tokens, and manage function calls in responses. Adjust the configurations and parameters as needed for your specific use case.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\",\"hash\":\"7t9Y9ptxKk4408fYe97Nrqr3T8+GPJH5Ux26zr894Iw=\"}","__type__":"DOCUMENT"},"firebase/compat/analytics":{"__data__":"{\"id_\":\"firebase/compat/analytics\",\"metadata\":{\"name\":\"firebase/compat/analytics\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"text\":\"Certainly! Below are some usage examples for Firebase in TypeScript. These examples assume that you have already set up Firebase in your project and have the necessary Firebase configuration.\\n\\n### 1. Initializing Firebase\\n\\nFirst, you need to initialize Firebase in your project. This is typically done in a separate file, such as `firebase.ts`.\\n\\n```typescript\\nimport firebase from 'firebase/app';\\nimport 'firebase/auth';\\nimport 'firebase/firestore';\\nimport 'firebase/analytics';\\n\\nconst firebaseConfig = {\\n  apiKey: \\\"YOUR_API_KEY\\\",\\n  authDomain: \\\"YOUR_AUTH_DOMAIN\\\",\\n  projectId: \\\"YOUR_PROJECT_ID\\\",\\n  storageBucket: \\\"YOUR_STORAGE_BUCKET\\\",\\n  messagingSenderId: \\\"YOUR_MESSAGING_SENDER_ID\\\",\\n  appId: \\\"YOUR_APP_ID\\\",\\n  measurementId: \\\"YOUR_MEASUREMENT_ID\\\"\\n};\\n\\n// Initialize Firebase\\nif (!firebase.apps.length) {\\n  firebase.initializeApp(firebaseConfig);\\n  firebase.analytics();\\n}\\n\\nexport default firebase;\\n```\\n\\n### 2. Using Firebase Authentication\\n\\nHere's an example of how to use Firebase Authentication to sign up and sign in users.\\n\\n```typescript\\nimport firebase from './firebase';\\n\\n// Sign up a new user\\nconst signUp = async (email: string, password: string) => {\\n  try {\\n    const userCredential = await firebase.auth().createUserWithEmailAndPassword(email, password);\\n    console.log('User signed up:', userCredential.user);\\n  } catch (error) {\\n    console.error('Error signing up:', error);\\n  }\\n};\\n\\n// Sign in an existing user\\nconst signIn = async (email: string, password: string) => {\\n  try {\\n    const userCredential = await firebase.auth().signInWithEmailAndPassword(email, password);\\n    console.log('User signed in:', userCredential.user);\\n  } catch (error) {\\n    console.error('Error signing in:', error);\\n  }\\n};\\n```\\n\\n### 3. Using Firestore\\n\\nHere's an example of how to use Firestore to add and retrieve data.\\n\\n```typescript\\nimport firebase from './firebase';\\n\\nconst db = firebase.firestore();\\n\\n// Add a new document\\nconst addDocument = async (collection: string, data: any) => {\\n  try {\\n    const docRef = await db.collection(collection).add(data);\\n    console.log('Document written with ID:', docRef.id);\\n  } catch (error) {\\n    console.error('Error adding document:', error);\\n  }\\n};\\n\\n// Get a document\\nconst getDocument = async (collection: string, docId: string) => {\\n  try {\\n    const doc = await db.collection(collection).doc(docId).get();\\n    if (doc.exists) {\\n      console.log('Document data:', doc.data());\\n    } else {\\n      console.log('No such document!');\\n    }\\n  } catch (error) {\\n    console.error('Error getting document:', error);\\n  }\\n};\\n```\\n\\n### 4. Using Firebase Analytics\\n\\nHere's an example of how to log events using Firebase Analytics.\\n\\n```typescript\\nimport firebase from './firebase';\\n\\n// Log a custom event\\nconst logEvent = (eventName: string, eventParams: { [key: string]: any }) => {\\n  firebase.analytics().logEvent(eventName, eventParams);\\n};\\n\\n// Example usage\\nlogEvent('select_content', {\\n  content_type: 'image',\\n  item_id: 'P12453'\\n});\\n```\\n\\n### 5. Using Firebase Realtime Database\\n\\nHere's an example of how to use Firebase Realtime Database to set and get data.\\n\\n```typescript\\nimport firebase from './firebase';\\n\\nconst database = firebase.database();\\n\\n// Set data\\nconst setData = async (path: string, data: any) => {\\n  try {\\n    await database.ref(path).set(data);\\n    console.log('Data set successfully');\\n  } catch (error) {\\n    console.error('Error setting data:', error);\\n  }\\n};\\n\\n// Get data\\nconst getData = async (path: string) => {\\n  try {\\n    const snapshot = await database.ref(path).once('value');\\n    const data = snapshot.val();\\n    console.log('Data retrieved:', data);\\n  } catch (error) {\\n    console.error('Error getting data:', error);\\n  }\\n};\\n```\\n\\nThese examples cover basic usage of Firebase Authentication, Firestore, Analytics, and Realtime Database in a TypeScript project. Make sure to replace placeholder values like `YOUR_API_KEY` with your actual Firebase project configuration values.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\",\"hash\":\"8qzt6oqcxdlmoCJ9Sqjxg40B7LRdOaalWCSpyzQTOoM=\"}","__type__":"DOCUMENT"},"firebase/compat/app":{"__data__":"{\"id_\":\"firebase/compat/app\",\"metadata\":{\"name\":\"firebase/compat/app\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"text\":\"Sure! Here are some usage examples based on the TypeScript definitions of the Firebase library:\\n\\n### 1. Initializing Firebase\\n\\n```typescript\\nimport firebase from 'firebase/app';\\nimport 'firebase/auth';\\nimport 'firebase/firestore';\\nimport 'firebase/storage';\\nimport 'firebase/database';\\n\\n// Initialize Firebase\\nconst firebaseConfig = {\\n  apiKey: \\\"YOUR_API_KEY\\\",\\n  authDomain: \\\"YOUR_AUTH_DOMAIN\\\",\\n  projectId: \\\"YOUR_PROJECT_ID\\\",\\n  storageBucket: \\\"YOUR_STORAGE_BUCKET\\\",\\n  messagingSenderId: \\\"YOUR_MESSAGING_SENDER_ID\\\",\\n  appId: \\\"YOUR_APP_ID\\\"\\n};\\n\\nfirebase.initializeApp(firebaseConfig);\\n```\\n\\n### 2. Authentication\\n\\n#### Sign Up with Email and Password\\n\\n```typescript\\nfirebase.auth().createUserWithEmailAndPassword('user@example.com', 'password123')\\n  .then((userCredential) => {\\n    // Signed in \\n    const user = userCredential.user;\\n    console.log('User signed up:', user);\\n  })\\n  .catch((error) => {\\n    console.error('Error signing up:', error);\\n  });\\n```\\n\\n#### Sign In with Email and Password\\n\\n```typescript\\nfirebase.auth().signInWithEmailAndPassword('user@example.com', 'password123')\\n  .then((userCredential) => {\\n    // Signed in\\n    const user = userCredential.user;\\n    console.log('User signed in:', user);\\n  })\\n  .catch((error) => {\\n    console.error('Error signing in:', error);\\n  });\\n```\\n\\n#### Sign Out\\n\\n```typescript\\nfirebase.auth().signOut()\\n  .then(() => {\\n    console.log('User signed out');\\n  })\\n  .catch((error) => {\\n    console.error('Error signing out:', error);\\n  });\\n```\\n\\n### 3. Firestore\\n\\n#### Adding a Document\\n\\n```typescript\\nconst db = firebase.firestore();\\n\\ndb.collection('users').add({\\n  firstName: 'Ada',\\n  lastName: 'Lovelace',\\n  email: 'ada@example.com'\\n})\\n.then((docRef) => {\\n  console.log('Document written with ID: ', docRef.id);\\n})\\n.catch((error) => {\\n  console.error('Error adding document: ', error);\\n});\\n```\\n\\n#### Reading a Document\\n\\n```typescript\\nconst docRef = db.collection('users').doc('USER_DOC_ID');\\n\\ndocRef.get().then((doc) => {\\n  if (doc.exists) {\\n    console.log('Document data:', doc.data());\\n  } else {\\n    console.log('No such document!');\\n  }\\n}).catch((error) => {\\n  console.error('Error getting document:', error);\\n});\\n```\\n\\n#### Updating a Document\\n\\n```typescript\\nconst updateRef = db.collection('users').doc('USER_DOC_ID');\\n\\nupdateRef.update({\\n  lastName: 'Byron'\\n})\\n.then(() => {\\n  console.log('Document successfully updated!');\\n})\\n.catch((error) => {\\n  console.error('Error updating document: ', error);\\n});\\n```\\n\\n#### Deleting a Document\\n\\n```typescript\\nconst deleteRef = db.collection('users').doc('USER_DOC_ID');\\n\\ndeleteRef.delete().then(() => {\\n  console.log('Document successfully deleted!');\\n}).catch((error) => {\\n  console.error('Error removing document: ', error);\\n});\\n```\\n\\n### 4. Realtime Database\\n\\n#### Writing Data\\n\\n```typescript\\nconst dbRef = firebase.database().ref('users/ada');\\n\\ndbRef.set({\\n  firstName: 'Ada',\\n  lastName: 'Lovelace',\\n  email: 'ada@example.com'\\n})\\n.then(() => {\\n  console.log('Data saved successfully!');\\n})\\n.catch((error) => {\\n  console.error('Error saving data: ', error);\\n});\\n```\\n\\n#### Reading Data\\n\\n```typescript\\nconst readRef = firebase.database().ref('users/ada');\\n\\nreadRef.on('value', (snapshot) => {\\n  const data = snapshot.val();\\n  console.log('Data:', data);\\n}, (error) => {\\n  console.error('Error reading data: ', error);\\n});\\n```\\n\\n#### Updating Data\\n\\n```typescript\\nconst updateDbRef = firebase.database().ref('users/ada');\\n\\nupdateDbRef.update({\\n  lastName: 'Byron'\\n})\\n.then(() => {\\n  console.log('Data updated successfully!');\\n})\\n.catch((error) => {\\n  console.error('Error updating data: ', error);\\n});\\n```\\n\\n#### Deleting Data\\n\\n```typescript\\nconst deleteDbRef = firebase.database().ref('users/ada');\\n\\ndeleteDbRef.remove()\\n.then(() => {\\n  console.log('Data removed successfully!');\\n})\\n.catch((error) => {\\n  console.error('Error removing data: ', error);\\n});\\n```\\n\\n### 5. Storage\\n\\n#### Uploading a File\\n\\n```typescript\\nconst storageRef = firebase.storage().ref();\\nconst fileRef = storageRef.child('images/myImage.png');\\nconst file = new Blob(['Hello, world!'], { type: 'text/plain' });\\n\\nfileRef.put(file).then((snapshot) => {\\n  console.log('Uploaded a blob or file!', snapshot);\\n});\\n```\\n\\n#### Downloading a File\\n\\n```typescript\\nconst downloadRef = storageRef.child('images/myImage.png');\\n\\ndownloadRef.getDownloadURL()\\n  .then((url) => {\\n    console.log('File available at', url);\\n  })\\n  .catch((error) => {\\n    console.error('Error getting download URL:', error);\\n  });\\n```\\n\\n#### Deleting a File\\n\\n```typescript\\nconst deleteFileRef = storageRef.child('images/myImage.png');\\n\\ndeleteFileRef.delete().then(() => {\\n  console.log('File deleted successfully');\\n}).catch((error) => {\\n  console.error('Error deleting file:', error);\\n});\\n```\\n\\nThese examples cover the basic usage of Firebase services including Authentication, Firestore, Realtime Database, and Storage. You can expand upon these examples based on your specific use case and requirements.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\",\"hash\":\"Xyn7wd7rTpTYCrAzcUH7VqSQ3gSNxYeWKlI+WSGQRoQ=\"}","__type__":"DOCUMENT"},"firebase/compat/app-check":{"__data__":"{\"id_\":\"firebase/compat/app-check\",\"metadata\":{\"name\":\"firebase/compat/app-check\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"text\":\"Certainly! Below are some usage examples for Firebase in TypeScript. These examples assume that you have already set up Firebase in your project and have the necessary Firebase configuration.\\n\\n### 1. Initializing Firebase\\n\\nFirst, you need to initialize Firebase with your project's configuration.\\n\\n```typescript\\nimport { initializeApp } from 'firebase/app';\\n\\nconst firebaseConfig = {\\n  apiKey: \\\"YOUR_API_KEY\\\",\\n  authDomain: \\\"YOUR_AUTH_DOMAIN\\\",\\n  projectId: \\\"YOUR_PROJECT_ID\\\",\\n  storageBucket: \\\"YOUR_STORAGE_BUCKET\\\",\\n  messagingSenderId: \\\"YOUR_MESSAGING_SENDER_ID\\\",\\n  appId: \\\"YOUR_APP_ID\\\"\\n};\\n\\n// Initialize Firebase\\nconst app = initializeApp(firebaseConfig);\\n```\\n\\n### 2. Using Firebase Authentication\\n\\nHere's an example of how to use Firebase Authentication to sign up a new user with email and password.\\n\\n```typescript\\nimport { getAuth, createUserWithEmailAndPassword } from 'firebase/auth';\\n\\nconst auth = getAuth();\\n\\nconst signUp = async (email: string, password: string) => {\\n  try {\\n    const userCredential = await createUserWithEmailAndPassword(auth, email, password);\\n    console.log('User signed up:', userCredential.user);\\n  } catch (error) {\\n    console.error('Error signing up:', error);\\n  }\\n};\\n\\nsignUp('test@example.com', 'password123');\\n```\\n\\n### 3. Using Firestore\\n\\nHere's an example of how to add a document to a Firestore collection.\\n\\n```typescript\\nimport { getFirestore, collection, addDoc } from 'firebase/firestore';\\n\\nconst db = getFirestore();\\n\\nconst addUser = async (user: { name: string, email: string }) => {\\n  try {\\n    const docRef = await addDoc(collection(db, 'users'), user);\\n    console.log('Document written with ID:', docRef.id);\\n  } catch (error) {\\n    console.error('Error adding document:', error);\\n  }\\n};\\n\\naddUser({ name: 'John Doe', email: 'john.doe@example.com' });\\n```\\n\\n### 4. Using Firebase Storage\\n\\nHere's an example of how to upload a file to Firebase Storage.\\n\\n```typescript\\nimport { getStorage, ref, uploadBytes } from 'firebase/storage';\\n\\nconst storage = getStorage();\\n\\nconst uploadFile = async (file: File) => {\\n  const storageRef = ref(storage, 'uploads/' + file.name);\\n  try {\\n    const snapshot = await uploadBytes(storageRef, file);\\n    console.log('Uploaded a blob or file!', snapshot);\\n  } catch (error) {\\n    console.error('Error uploading file:', error);\\n  }\\n};\\n\\n// Assuming you have a file input element in your HTML\\nconst fileInput = document.getElementById('fileInput') as HTMLInputElement;\\nfileInput.addEventListener('change', (event) => {\\n  const file = (event.target as HTMLInputElement).files?.[0];\\n  if (file) {\\n    uploadFile(file);\\n  }\\n});\\n```\\n\\n### 5. Using Firebase Realtime Database\\n\\nHere's an example of how to write data to the Firebase Realtime Database.\\n\\n```typescript\\nimport { getDatabase, ref, set } from 'firebase/database';\\n\\nconst database = getDatabase();\\n\\nconst writeUserData = (userId: string, name: string, email: string) => {\\n  set(ref(database, 'users/' + userId), {\\n    username: name,\\n    email: email\\n  })\\n  .then(() => {\\n    console.log('Data saved successfully!');\\n  })\\n  .catch((error) => {\\n    console.error('Error saving data:', error);\\n  });\\n};\\n\\nwriteUserData('1', 'John Doe', 'john.doe@example.com');\\n```\\n\\nThese examples cover some of the basic functionalities of Firebase, such as initialization, authentication, Firestore, Storage, and Realtime Database. Make sure to replace placeholder values like `YOUR_API_KEY` with your actual Firebase project configuration values.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\",\"hash\":\"2jk/8K/mkjisVpTD+9AMQYJtSVgpvD5dmnvKP2OMV9Y=\"}","__type__":"DOCUMENT"},"firebase/compat/auth":{"__data__":"{\"id_\":\"firebase/compat/auth\",\"metadata\":{\"name\":\"firebase/compat/auth\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"text\":\"Certainly! Below are some usage examples for the Firebase dependency, specifically focusing on Firebase Authentication using the `@firebase/auth-compat` package. These examples assume you have already set up your Firebase project and have the necessary configuration details.\\n\\n### Example 1: Initializing Firebase\\n\\nFirst, you need to initialize Firebase in your TypeScript project.\\n\\n```typescript\\nimport firebase from 'firebase/compat/app';\\nimport 'firebase/compat/auth';\\n\\n// Your web app's Firebase configuration\\nconst firebaseConfig = {\\n  apiKey: \\\"YOUR_API_KEY\\\",\\n  authDomain: \\\"YOUR_AUTH_DOMAIN\\\",\\n  projectId: \\\"YOUR_PROJECT_ID\\\",\\n  storageBucket: \\\"YOUR_STORAGE_BUCKET\\\",\\n  messagingSenderId: \\\"YOUR_MESSAGING_SENDER_ID\\\",\\n  appId: \\\"YOUR_APP_ID\\\"\\n};\\n\\n// Initialize Firebase\\nfirebase.initializeApp(firebaseConfig);\\n```\\n\\n### Example 2: User Sign-Up with Email and Password\\n\\n```typescript\\nimport firebase from 'firebase/compat/app';\\nimport 'firebase/compat/auth';\\n\\nconst signUp = async (email: string, password: string) => {\\n  try {\\n    const userCredential = await firebase.auth().createUserWithEmailAndPassword(email, password);\\n    console.log('User signed up:', userCredential.user);\\n  } catch (error) {\\n    console.error('Error signing up:', error);\\n  }\\n};\\n\\n// Usage\\nsignUp('test@example.com', 'password123');\\n```\\n\\n### Example 3: User Sign-In with Email and Password\\n\\n```typescript\\nimport firebase from 'firebase/compat/app';\\nimport 'firebase/compat/auth';\\n\\nconst signIn = async (email: string, password: string) => {\\n  try {\\n    const userCredential = await firebase.auth().signInWithEmailAndPassword(email, password);\\n    console.log('User signed in:', userCredential.user);\\n  } catch (error) {\\n    console.error('Error signing in:', error);\\n  }\\n};\\n\\n// Usage\\nsignIn('test@example.com', 'password123');\\n```\\n\\n### Example 4: Sign-Out\\n\\n```typescript\\nimport firebase from 'firebase/compat/app';\\nimport 'firebase/compat/auth';\\n\\nconst signOut = async () => {\\n  try {\\n    await firebase.auth().signOut();\\n    console.log('User signed out');\\n  } catch (error) {\\n    console.error('Error signing out:', error);\\n  }\\n};\\n\\n// Usage\\nsignOut();\\n```\\n\\n### Example 5: Listening for Authentication State Changes\\n\\n```typescript\\nimport firebase from 'firebase/compat/app';\\nimport 'firebase/compat/auth';\\n\\nfirebase.auth().onAuthStateChanged(user => {\\n  if (user) {\\n    console.log('User is signed in:', user);\\n  } else {\\n    console.log('No user is signed in');\\n  }\\n});\\n```\\n\\n### Example 6: Password Reset\\n\\n```typescript\\nimport firebase from 'firebase/compat/app';\\nimport 'firebase/compat/auth';\\n\\nconst resetPassword = async (email: string) => {\\n  try {\\n    await firebase.auth().sendPasswordResetEmail(email);\\n    console.log('Password reset email sent');\\n  } catch (error) {\\n    console.error('Error sending password reset email:', error);\\n  }\\n};\\n\\n// Usage\\nresetPassword('test@example.com');\\n```\\n\\nThese examples cover the basic functionalities of Firebase Authentication using the `@firebase/auth-compat` package in a TypeScript environment. Make sure to replace placeholder values like `YOUR_API_KEY` with your actual Firebase project configuration details.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\",\"hash\":\"uhrtI309TiPb202VQv7QZqxZS9TTtszuVWs87K23yp8=\"}","__type__":"DOCUMENT"},"firebase/compat/database":{"__data__":"{\"id_\":\"firebase/compat/database\",\"metadata\":{\"name\":\"firebase/compat/database\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"text\":\"Certainly! Below are some usage examples for Firebase in TypeScript. These examples assume that you have already set up Firebase in your project and have the necessary configuration details.\\n\\n### 1. Initializing Firebase\\nFirst, you need to initialize Firebase with your project's configuration details.\\n\\n```typescript\\nimport { initializeApp } from 'firebase/app';\\nimport { getDatabase } from 'firebase/database-compat';\\n\\n// Your web app's Firebase configuration\\nconst firebaseConfig = {\\n  apiKey: \\\"YOUR_API_KEY\\\",\\n  authDomain: \\\"YOUR_AUTH_DOMAIN\\\",\\n  databaseURL: \\\"YOUR_DATABASE_URL\\\",\\n  projectId: \\\"YOUR_PROJECT_ID\\\",\\n  storageBucket: \\\"YOUR_STORAGE_BUCKET\\\",\\n  messagingSenderId: \\\"YOUR_MESSAGING_SENDER_ID\\\",\\n  appId: \\\"YOUR_APP_ID\\\"\\n};\\n\\n// Initialize Firebase\\nconst app = initializeApp(firebaseConfig);\\nconst database = getDatabase(app);\\n```\\n\\n### 2. Writing Data to Firebase Realtime Database\\nYou can write data to the Firebase Realtime Database using the `set` method.\\n\\n```typescript\\nimport { ref, set } from 'firebase/database-compat';\\n\\nfunction writeUserData(userId: string, name: string, email: string, imageUrl: string) {\\n  set(ref(database, 'users/' + userId), {\\n    username: name,\\n    email: email,\\n    profile_picture: imageUrl\\n  });\\n}\\n\\n// Example usage\\nwriteUserData('1', 'John Doe', 'john.doe@example.com', 'http://example.com/john.jpg');\\n```\\n\\n### 3. Reading Data from Firebase Realtime Database\\nYou can read data from the Firebase Realtime Database using the `get` method.\\n\\n```typescript\\nimport { ref, get, child } from 'firebase/database-compat';\\n\\nfunction readUserData(userId: string) {\\n  const dbRef = ref(database);\\n  get(child(dbRef, `users/${userId}`)).then((snapshot) => {\\n    if (snapshot.exists()) {\\n      console.log(snapshot.val());\\n    } else {\\n      console.log(\\\"No data available\\\");\\n    }\\n  }).catch((error) => {\\n    console.error(error);\\n  });\\n}\\n\\n// Example usage\\nreadUserData('1');\\n```\\n\\n### 4. Listening for Real-time Updates\\nYou can listen for real-time updates using the `on` method.\\n\\n```typescript\\nimport { ref, onValue } from 'firebase/database-compat';\\n\\nfunction listenForUserData(userId: string) {\\n  const userRef = ref(database, 'users/' + userId);\\n  onValue(userRef, (snapshot) => {\\n    const data = snapshot.val();\\n    console.log(data);\\n  });\\n}\\n\\n// Example usage\\nlistenForUserData('1');\\n```\\n\\n### 5. Updating Data\\nYou can update data using the `update` method.\\n\\n```typescript\\nimport { ref, update } from 'firebase/database-compat';\\n\\nfunction updateUserData(userId: string, updates: object) {\\n  const userRef = ref(database, 'users/' + userId);\\n  update(userRef, updates);\\n}\\n\\n// Example usage\\nupdateUserData('1', { username: 'Jane Doe' });\\n```\\n\\n### 6. Deleting Data\\nYou can delete data using the `remove` method.\\n\\n```typescript\\nimport { ref, remove } from 'firebase/database-compat';\\n\\nfunction deleteUserData(userId: string) {\\n  const userRef = ref(database, 'users/' + userId);\\n  remove(userRef);\\n}\\n\\n// Example usage\\ndeleteUserData('1');\\n```\\n\\nThese examples cover basic CRUD operations using Firebase Realtime Database in a TypeScript environment. Make sure to replace placeholders like `\\\"YOUR_API_KEY\\\"` with your actual Firebase project configuration details.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\",\"hash\":\"GG6/2vWYUcnEH2D29iacDlJa7LoWuEIJhpt7sT8fSH0=\"}","__type__":"DOCUMENT"},"firebase/compat/firestore":{"__data__":"{\"id_\":\"firebase/compat/firestore\",\"metadata\":{\"name\":\"firebase/compat/firestore\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"text\":\"Certainly! Based on the TypeScript definitions and the import statement for `@firebase/firestore-compat`, I'll provide some usage examples for Firebase Firestore in a TypeScript project. These examples will cover initializing Firebase, adding data to Firestore, reading data from Firestore, and updating data in Firestore.\\n\\nFirst, make sure you have Firebase installed in your project:\\n\\n```sh\\nnpm install firebase\\n```\\n\\nThen, you can use the following examples in your TypeScript project:\\n\\n### 1. Initialize Firebase\\n\\n```ts\\nimport firebase from 'firebase/app';\\nimport 'firebase/firestore';\\n\\nconst firebaseConfig = {\\n  apiKey: \\\"YOUR_API_KEY\\\",\\n  authDomain: \\\"YOUR_AUTH_DOMAIN\\\",\\n  projectId: \\\"YOUR_PROJECT_ID\\\",\\n  storageBucket: \\\"YOUR_STORAGE_BUCKET\\\",\\n  messagingSenderId: \\\"YOUR_MESSAGING_SENDER_ID\\\",\\n  appId: \\\"YOUR_APP_ID\\\"\\n};\\n\\n// Initialize Firebase\\nif (!firebase.apps.length) {\\n  firebase.initializeApp(firebaseConfig);\\n} else {\\n  firebase.app(); // if already initialized, use that one\\n}\\n\\nconst db = firebase.firestore();\\n```\\n\\n### 2. Add Data to Firestore\\n\\n```ts\\nconst addData = async () => {\\n  try {\\n    const docRef = await db.collection('users').add({\\n      firstName: 'John',\\n      lastName: 'Doe',\\n      age: 30,\\n      email: 'john.doe@example.com'\\n    });\\n    console.log('Document written with ID: ', docRef.id);\\n  } catch (error) {\\n    console.error('Error adding document: ', error);\\n  }\\n};\\n\\naddData();\\n```\\n\\n### 3. Read Data from Firestore\\n\\n```ts\\nconst readData = async () => {\\n  try {\\n    const querySnapshot = await db.collection('users').get();\\n    querySnapshot.forEach((doc) => {\\n      console.log(`${doc.id} => `, doc.data());\\n    });\\n  } catch (error) {\\n    console.error('Error reading documents: ', error);\\n  }\\n};\\n\\nreadData();\\n```\\n\\n### 4. Update Data in Firestore\\n\\n```ts\\nconst updateData = async (docId: string) => {\\n  try {\\n    const userRef = db.collection('users').doc(docId);\\n    await userRef.update({\\n      age: 31\\n    });\\n    console.log('Document successfully updated!');\\n  } catch (error) {\\n    console.error('Error updating document: ', error);\\n  }\\n};\\n\\nupdateData('DOCUMENT_ID'); // Replace 'DOCUMENT_ID' with the actual document ID\\n```\\n\\n### 5. Delete Data from Firestore\\n\\n```ts\\nconst deleteData = async (docId: string) => {\\n  try {\\n    await db.collection('users').doc(docId).delete();\\n    console.log('Document successfully deleted!');\\n  } catch (error) {\\n    console.error('Error deleting document: ', error);\\n  }\\n};\\n\\ndeleteData('DOCUMENT_ID'); // Replace 'DOCUMENT_ID' with the actual document ID\\n```\\n\\nThese examples demonstrate basic CRUD (Create, Read, Update, Delete) operations with Firebase Firestore in a TypeScript environment. Make sure to replace placeholder values like `YOUR_API_KEY`, `YOUR_PROJECT_ID`, and `DOCUMENT_ID` with actual values from your Firebase project.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\",\"hash\":\"tRd7L/PYmM9jr3ca+oQElvEqoBpFnxUfrz+EBLvMdTk=\"}","__type__":"DOCUMENT"},"firebase/compat/functions":{"__data__":"{\"id_\":\"firebase/compat/functions\",\"metadata\":{\"name\":\"firebase/compat/functions\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"text\":\"Certainly! Below are some usage examples for Firebase in TypeScript. These examples assume that you have already set up Firebase in your project and have the necessary Firebase configuration.\\n\\n### Example 1: Initializing Firebase\\n\\n```typescript\\nimport firebase from 'firebase/app';\\nimport 'firebase/auth';\\nimport 'firebase/firestore';\\nimport 'firebase/functions-compat';\\n\\n// Your web app's Firebase configuration\\nconst firebaseConfig = {\\n  apiKey: \\\"YOUR_API_KEY\\\",\\n  authDomain: \\\"YOUR_AUTH_DOMAIN\\\",\\n  projectId: \\\"YOUR_PROJECT_ID\\\",\\n  storageBucket: \\\"YOUR_STORAGE_BUCKET\\\",\\n  messagingSenderId: \\\"YOUR_MESSAGING_SENDER_ID\\\",\\n  appId: \\\"YOUR_APP_ID\\\"\\n};\\n\\n// Initialize Firebase\\nif (!firebase.apps.length) {\\n  firebase.initializeApp(firebaseConfig);\\n} else {\\n  firebase.app(); // if already initialized, use that one\\n}\\n```\\n\\n### Example 2: Using Firebase Authentication\\n\\n```typescript\\nimport firebase from 'firebase/app';\\nimport 'firebase/auth';\\n\\nconst auth = firebase.auth();\\n\\n// Sign up a new user\\nauth.createUserWithEmailAndPassword('user@example.com', 'password123')\\n  .then((userCredential) => {\\n    // Signed in \\n    const user = userCredential.user;\\n    console.log('User signed up:', user);\\n  })\\n  .catch((error) => {\\n    console.error('Error signing up:', error);\\n  });\\n\\n// Sign in an existing user\\nauth.signInWithEmailAndPassword('user@example.com', 'password123')\\n  .then((userCredential) => {\\n    // Signed in \\n    const user = userCredential.user;\\n    console.log('User signed in:', user);\\n  })\\n  .catch((error) => {\\n    console.error('Error signing in:', error);\\n  });\\n```\\n\\n### Example 3: Using Firestore\\n\\n```typescript\\nimport firebase from 'firebase/app';\\nimport 'firebase/firestore';\\n\\nconst db = firebase.firestore();\\n\\n// Add a new document with a generated ID\\ndb.collection('users').add({\\n  firstName: 'John',\\n  lastName: 'Doe',\\n  age: 30\\n})\\n.then((docRef) => {\\n  console.log('Document written with ID: ', docRef.id);\\n})\\n.catch((error) => {\\n  console.error('Error adding document: ', error);\\n});\\n\\n// Get a document by ID\\ndb.collection('users').doc('USER_DOC_ID').get()\\n  .then((doc) => {\\n    if (doc.exists) {\\n      console.log('Document data:', doc.data());\\n    } else {\\n      console.log('No such document!');\\n    }\\n  })\\n  .catch((error) => {\\n    console.error('Error getting document:', error);\\n  });\\n```\\n\\n### Example 4: Using Firebase Functions\\n\\n```typescript\\nimport firebase from 'firebase/app';\\nimport 'firebase/functions-compat';\\n\\nconst functions = firebase.functions();\\n\\n// Call a Firebase Function\\nconst addMessage = functions.httpsCallable('addMessage');\\naddMessage({ text: 'Hello, world!' })\\n  .then((result) => {\\n    console.log('Function result:', result.data);\\n  })\\n  .catch((error) => {\\n    console.error('Error calling function:', error);\\n  });\\n```\\n\\n### Example 5: Using Firebase Storage\\n\\n```typescript\\nimport firebase from 'firebase/app';\\nimport 'firebase/storage';\\n\\nconst storage = firebase.storage();\\n\\n// Upload a file\\nconst file = new File(['Hello, world!'], 'hello.txt', { type: 'text/plain' });\\nconst storageRef = storage.ref();\\nconst fileRef = storageRef.child('hello.txt');\\n\\nfileRef.put(file).then((snapshot) => {\\n  console.log('Uploaded a file!');\\n});\\n\\n// Download a file\\nfileRef.getDownloadURL()\\n  .then((url) => {\\n    console.log('File available at', url);\\n  })\\n  .catch((error) => {\\n    console.error('Error getting file URL:', error);\\n  });\\n```\\n\\nThese examples cover common use cases such as initializing Firebase, using Firebase Authentication, Firestore, Functions, and Storage. Make sure to replace placeholder values like `YOUR_API_KEY`, `USER_DOC_ID`, etc., with actual values from your Firebase project.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\",\"hash\":\"aq+v1jKsMRcg/rJ9A9R3uj3Lkg1ZEm8gmV8NGjGAn/Q=\"}","__type__":"DOCUMENT"},"firebase/compat/installations":{"__data__":"{\"id_\":\"firebase/compat/installations\",\"metadata\":{\"name\":\"firebase/compat/installations\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"text\":\"Sure, I can provide some usage examples for Firebase in TypeScript. Since the provided TypeScript definitions are minimal and only show an import statement for `@firebase/installations-compat`, I'll assume you want general examples of how to use Firebase in a TypeScript project.\\n\\nBelow are some common usage examples for Firebase in a TypeScript project:\\n\\n### 1. Setting Up Firebase\\nFirst, you need to install Firebase in your project:\\n```sh\\nnpm install firebase\\n```\\n\\n### 2. Initializing Firebase\\nCreate a `firebaseConfig.ts` file to initialize Firebase with your project's configuration:\\n```ts\\n// firebaseConfig.ts\\nimport { initializeApp } from 'firebase/app';\\n\\nconst firebaseConfig = {\\n  apiKey: 'YOUR_API_KEY',\\n  authDomain: 'YOUR_AUTH_DOMAIN',\\n  projectId: 'YOUR_PROJECT_ID',\\n  storageBucket: 'YOUR_STORAGE_BUCKET',\\n  messagingSenderId: 'YOUR_MESSAGING_SENDER_ID',\\n  appId: 'YOUR_APP_ID',\\n};\\n\\nconst app = initializeApp(firebaseConfig);\\n\\nexport default app;\\n```\\n\\n### 3. Using Firebase Authentication\\nHere's an example of how to use Firebase Authentication to sign in a user with email and password:\\n```ts\\n// auth.ts\\nimport { getAuth, signInWithEmailAndPassword, createUserWithEmailAndPassword } from 'firebase/auth';\\nimport app from './firebaseConfig';\\n\\nconst auth = getAuth(app);\\n\\nexport const signIn = async (email: string, password: string) => {\\n  try {\\n    const userCredential = await signInWithEmailAndPassword(auth, email, password);\\n    console.log('User signed in:', userCredential.user);\\n  } catch (error) {\\n    console.error('Error signing in:', error);\\n  }\\n};\\n\\nexport const signUp = async (email: string, password: string) => {\\n  try {\\n    const userCredential = await createUserWithEmailAndPassword(auth, email, password);\\n    console.log('User signed up:', userCredential.user);\\n  } catch (error) {\\n    console.error('Error signing up:', error);\\n  }\\n};\\n```\\n\\n### 4. Using Firestore\\nHere's an example of how to use Firestore to add and retrieve data:\\n```ts\\n// firestore.ts\\nimport { getFirestore, collection, addDoc, getDocs } from 'firebase/firestore';\\nimport app from './firebaseConfig';\\n\\nconst db = getFirestore(app);\\n\\nexport const addUser = async (name: string, email: string) => {\\n  try {\\n    const docRef = await addDoc(collection(db, 'users'), {\\n      name,\\n      email,\\n    });\\n    console.log('Document written with ID:', docRef.id);\\n  } catch (error) {\\n    console.error('Error adding document:', error);\\n  }\\n};\\n\\nexport const getUsers = async () => {\\n  try {\\n    const querySnapshot = await getDocs(collection(db, 'users'));\\n    querySnapshot.forEach((doc) => {\\n      console.log(`${doc.id} => ${JSON.stringify(doc.data())}`);\\n    });\\n  } catch (error) {\\n    console.error('Error getting documents:', error);\\n  }\\n};\\n```\\n\\n### 5. Using Firebase Storage\\nHere's an example of how to upload a file to Firebase Storage:\\n```ts\\n// storage.ts\\nimport { getStorage, ref, uploadBytes, getDownloadURL } from 'firebase/storage';\\nimport app from './firebaseConfig';\\n\\nconst storage = getStorage(app);\\n\\nexport const uploadFile = async (file: File) => {\\n  const storageRef = ref(storage, `files/${file.name}`);\\n  try {\\n    const snapshot = await uploadBytes(storageRef, file);\\n    console.log('Uploaded a blob or file!', snapshot);\\n    const downloadURL = await getDownloadURL(snapshot.ref);\\n    console.log('File available at', downloadURL);\\n  } catch (error) {\\n    console.error('Error uploading file:', error);\\n  }\\n};\\n```\\n\\nThese examples cover basic usage of Firebase Authentication, Firestore, and Storage in a TypeScript project. Make sure to replace the placeholder values in the configuration with your actual Firebase project details.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\",\"hash\":\"eCGNtEhkkySwte714wY3NqPxUtLpKVucLS2AGV4nR90=\"}","__type__":"DOCUMENT"},"firebase/compat/messaging":{"__data__":"{\"id_\":\"firebase/compat/messaging\",\"metadata\":{\"name\":\"firebase/compat/messaging\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"text\":\"Certainly! Below are some usage examples for Firebase in TypeScript. These examples assume you have already installed the Firebase SDK and have set up your Firebase project.\\n\\n### Example 1: Initializing Firebase\\n\\nFirst, you need to initialize Firebase with your project's configuration.\\n\\n```typescript\\nimport { initializeApp } from 'firebase/app';\\n\\nconst firebaseConfig = {\\n  apiKey: \\\"YOUR_API_KEY\\\",\\n  authDomain: \\\"YOUR_AUTH_DOMAIN\\\",\\n  projectId: \\\"YOUR_PROJECT_ID\\\",\\n  storageBucket: \\\"YOUR_STORAGE_BUCKET\\\",\\n  messagingSenderId: \\\"YOUR_MESSAGING_SENDER_ID\\\",\\n  appId: \\\"YOUR_APP_ID\\\"\\n};\\n\\n// Initialize Firebase\\nconst app = initializeApp(firebaseConfig);\\n```\\n\\n### Example 2: Using Firestore\\n\\nHere's how you can use Firestore to add and retrieve data.\\n\\n```typescript\\nimport { getFirestore, collection, addDoc, getDocs } from 'firebase/firestore';\\n\\nconst db = getFirestore(app);\\n\\n// Adding a document\\nasync function addUser() {\\n  try {\\n    const docRef = await addDoc(collection(db, \\\"users\\\"), {\\n      first: \\\"Ada\\\",\\n      last: \\\"Lovelace\\\",\\n      born: 1815\\n    });\\n    console.log(\\\"Document written with ID: \\\", docRef.id);\\n  } catch (e) {\\n    console.error(\\\"Error adding document: \\\", e);\\n  }\\n}\\n\\n// Retrieving documents\\nasync function getUsers() {\\n  const querySnapshot = await getDocs(collection(db, \\\"users\\\"));\\n  querySnapshot.forEach((doc) => {\\n    console.log(`${doc.id} => ${doc.data()}`);\\n  });\\n}\\n```\\n\\n### Example 3: Using Firebase Authentication\\n\\nHere's how you can use Firebase Authentication to sign up and sign in users.\\n\\n```typescript\\nimport { getAuth, createUserWithEmailAndPassword, signInWithEmailAndPassword } from 'firebase/auth';\\n\\nconst auth = getAuth(app);\\n\\n// Sign up a new user\\nasync function signUp(email: string, password: string) {\\n  try {\\n    const userCredential = await createUserWithEmailAndPassword(auth, email, password);\\n    console.log(\\\"User signed up: \\\", userCredential.user);\\n  } catch (error) {\\n    console.error(\\\"Error signing up: \\\", error);\\n  }\\n}\\n\\n// Sign in an existing user\\nasync function signIn(email: string, password: string) {\\n  try {\\n    const userCredential = await signInWithEmailAndPassword(auth, email, password);\\n    console.log(\\\"User signed in: \\\", userCredential.user);\\n  } catch (error) {\\n    console.error(\\\"Error signing in: \\\", error);\\n  }\\n}\\n```\\n\\n### Example 4: Using Firebase Storage\\n\\nHere's how you can upload and download files using Firebase Storage.\\n\\n```typescript\\nimport { getStorage, ref, uploadBytes, getDownloadURL } from 'firebase/storage';\\n\\nconst storage = getStorage(app);\\n\\n// Upload a file\\nasync function uploadFile(file: File) {\\n  const storageRef = ref(storage, 'some-child');\\n  try {\\n    const snapshot = await uploadBytes(storageRef, file);\\n    console.log('Uploaded a blob or file!', snapshot);\\n  } catch (error) {\\n    console.error(\\\"Error uploading file: \\\", error);\\n  }\\n}\\n\\n// Download a file\\nasync function downloadFile() {\\n  const storageRef = ref(storage, 'some-child');\\n  try {\\n    const url = await getDownloadURL(storageRef);\\n    console.log('File available at', url);\\n  } catch (error) {\\n    console.error(\\\"Error downloading file: \\\", error);\\n  }\\n}\\n```\\n\\n### Example 5: Using Firebase Messaging\\n\\nHere's how you can set up Firebase Cloud Messaging to receive push notifications.\\n\\n```typescript\\nimport { getMessaging, getToken, onMessage } from 'firebase/messaging';\\n\\nconst messaging = getMessaging(app);\\n\\n// Request permission and get token\\nasync function requestPermission() {\\n  try {\\n    const token = await getToken(messaging, { vapidKey: 'YOUR_PUBLIC_VAPID_KEY' });\\n    console.log('Token received: ', token);\\n  } catch (error) {\\n    console.error('Error getting token: ', error);\\n  }\\n}\\n\\n// Handle incoming messages\\nonMessage(messaging, (payload) => {\\n  console.log('Message received. ', payload);\\n});\\n```\\n\\nThese examples should give you a good starting point for using Firebase in a TypeScript project. Make sure to replace placeholder values like `YOUR_API_KEY` and `YOUR_PUBLIC_VAPID_KEY` with actual values from your Firebase project configuration.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\",\"hash\":\"JHSPK2x9m8u+0+TvQb4Wo5XcIXtHulPwdRKuzg/c8nE=\"}","__type__":"DOCUMENT"},"firebase/compat/performance":{"__data__":"{\"id_\":\"firebase/compat/performance\",\"metadata\":{\"name\":\"firebase/compat/performance\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"text\":\"Certainly! The TypeScript definitions you provided are for the Firebase library, specifically mentioning the `@firebase/performance-compat` module. Below are some usage examples demonstrating how you might use Firebase in a TypeScript project.\\n\\n### Example 1: Initializing Firebase\\n\\nFirst, you need to initialize Firebase with your project's configuration.\\n\\n```typescript\\nimport firebase from 'firebase/app';\\nimport 'firebase/auth';\\nimport 'firebase/firestore';\\nimport 'firebase/performance-compat';\\n\\n// Your web app's Firebase configuration\\nconst firebaseConfig = {\\n  apiKey: \\\"YOUR_API_KEY\\\",\\n  authDomain: \\\"YOUR_AUTH_DOMAIN\\\",\\n  projectId: \\\"YOUR_PROJECT_ID\\\",\\n  storageBucket: \\\"YOUR_STORAGE_BUCKET\\\",\\n  messagingSenderId: \\\"YOUR_MESSAGING_SENDER_ID\\\",\\n  appId: \\\"YOUR_APP_ID\\\"\\n};\\n\\n// Initialize Firebase\\nfirebase.initializeApp(firebaseConfig);\\n\\n// Initialize Performance Monitoring\\nconst perf = firebase.performance();\\n```\\n\\n### Example 2: Using Firebase Authentication\\n\\nHere's how you can use Firebase Authentication to sign in a user with email and password.\\n\\n```typescript\\nimport firebase from 'firebase/app';\\nimport 'firebase/auth';\\n\\nconst signInWithEmail = async (email: string, password: string) => {\\n  try {\\n    const userCredential = await firebase.auth().signInWithEmailAndPassword(email, password);\\n    console.log('User signed in:', userCredential.user);\\n  } catch (error) {\\n    console.error('Error signing in:', error);\\n  }\\n};\\n\\nsignInWithEmail('user@example.com', 'password123');\\n```\\n\\n### Example 3: Using Firestore\\n\\nThis example demonstrates how to add and retrieve data from Firestore.\\n\\n```typescript\\nimport firebase from 'firebase/app';\\nimport 'firebase/firestore';\\n\\nconst db = firebase.firestore();\\n\\nconst addUser = async (userId: string, name: string, email: string) => {\\n  try {\\n    await db.collection('users').doc(userId).set({\\n      name,\\n      email\\n    });\\n    console.log('User added successfully');\\n  } catch (error) {\\n    console.error('Error adding user:', error);\\n  }\\n};\\n\\nconst getUser = async (userId: string) => {\\n  try {\\n    const doc = await db.collection('users').doc(userId).get();\\n    if (doc.exists) {\\n      console.log('User data:', doc.data());\\n    } else {\\n      console.log('No such user!');\\n    }\\n  } catch (error) {\\n    console.error('Error getting user:', error);\\n  }\\n};\\n\\naddUser('user123', 'John Doe', 'john.doe@example.com');\\ngetUser('user123');\\n```\\n\\n### Example 4: Using Firebase Performance Monitoring\\n\\nThis example shows how to use Firebase Performance Monitoring to trace a custom event.\\n\\n```typescript\\nimport firebase from 'firebase/app';\\nimport 'firebase/performance-compat';\\n\\nconst perf = firebase.performance();\\n\\nconst trace = perf.trace('customTrace');\\ntrace.start();\\n\\n// Simulate some work\\nsetTimeout(() => {\\n  trace.stop();\\n  console.log('Custom trace completed');\\n}, 2000);\\n```\\n\\nThese examples should give you a good starting point for using Firebase in a TypeScript project. Make sure to replace placeholder values like `YOUR_API_KEY` with your actual Firebase project configuration values.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\",\"hash\":\"u14CdOfnzzikXsutxVomprGCClOACb4Ua2SbYUzfoxU=\"}","__type__":"DOCUMENT"},"firebase/compat/remote-config":{"__data__":"{\"id_\":\"firebase/compat/remote-config\",\"metadata\":{\"name\":\"firebase/compat/remote-config\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"text\":\"Certainly! Below are some usage examples of Firebase in TypeScript, assuming you have the Firebase SDK installed and configured in your project. The examples will cover common Firebase functionalities such as authentication, Firestore, and Remote Config.\\n\\n### 1. Initializing Firebase\\n\\nFirst, ensure you have initialized Firebase in your project:\\n\\n```typescript\\nimport firebase from 'firebase/app';\\nimport 'firebase/auth';\\nimport 'firebase/firestore';\\nimport 'firebase/remote-config';\\n\\n// Your web app's Firebase configuration\\nconst firebaseConfig = {\\n  apiKey: \\\"YOUR_API_KEY\\\",\\n  authDomain: \\\"YOUR_AUTH_DOMAIN\\\",\\n  projectId: \\\"YOUR_PROJECT_ID\\\",\\n  storageBucket: \\\"YOUR_STORAGE_BUCKET\\\",\\n  messagingSenderId: \\\"YOUR_MESSAGING_SENDER_ID\\\",\\n  appId: \\\"YOUR_APP_ID\\\"\\n};\\n\\n// Initialize Firebase\\nif (!firebase.apps.length) {\\n  firebase.initializeApp(firebaseConfig);\\n}\\n```\\n\\n### 2. Firebase Authentication\\n\\n#### Sign Up with Email and Password\\n\\n```typescript\\nconst signUp = async (email: string, password: string) => {\\n  try {\\n    const userCredential = await firebase.auth().createUserWithEmailAndPassword(email, password);\\n    console.log('User signed up:', userCredential.user);\\n  } catch (error) {\\n    console.error('Error signing up:', error);\\n  }\\n};\\n```\\n\\n#### Sign In with Email and Password\\n\\n```typescript\\nconst signIn = async (email: string, password: string) => {\\n  try {\\n    const userCredential = await firebase.auth().signInWithEmailAndPassword(email, password);\\n    console.log('User signed in:', userCredential.user);\\n  } catch (error) {\\n    console.error('Error signing in:', error);\\n  }\\n};\\n```\\n\\n### 3. Firestore\\n\\n#### Adding a Document\\n\\n```typescript\\nconst addDocument = async (collection: string, data: any) => {\\n  try {\\n    const docRef = await firebase.firestore().collection(collection).add(data);\\n    console.log('Document written with ID:', docRef.id);\\n  } catch (error) {\\n    console.error('Error adding document:', error);\\n  }\\n};\\n```\\n\\n#### Reading a Document\\n\\n```typescript\\nconst getDocument = async (collection: string, docId: string) => {\\n  try {\\n    const doc = await firebase.firestore().collection(collection).doc(docId).get();\\n    if (doc.exists) {\\n      console.log('Document data:', doc.data());\\n    } else {\\n      console.log('No such document!');\\n    }\\n  } catch (error) {\\n    console.error('Error getting document:', error);\\n  }\\n};\\n```\\n\\n### 4. Remote Config\\n\\n#### Fetching and Activating Remote Config\\n\\n```typescript\\nconst fetchAndActivateRemoteConfig = async () => {\\n  const remoteConfig = firebase.remoteConfig();\\n  remoteConfig.settings = {\\n    minimumFetchIntervalMillis: 3600000, // 1 hour\\n  };\\n\\n  try {\\n    await remoteConfig.fetchAndActivate();\\n    console.log('Remote config activated');\\n  } catch (error) {\\n    console.error('Error fetching and activating remote config:', error);\\n  }\\n};\\n\\nconst getRemoteConfigValue = (key: string) => {\\n  const remoteConfig = firebase.remoteConfig();\\n  const value = remoteConfig.getValue(key);\\n  console.log(`Remote config value for ${key}:`, value.asString());\\n};\\n```\\n\\n### 5. Putting It All Together\\n\\nHere's a simple example that combines authentication, Firestore, and Remote Config:\\n\\n```typescript\\nconst main = async () => {\\n  await signUp('test@example.com', 'password123');\\n  await signIn('test@example.com', 'password123');\\n  \\n  await addDocument('users', { name: 'John Doe', email: 'test@example.com' });\\n  await getDocument('users', 'DOCUMENT_ID'); // Replace 'DOCUMENT_ID' with the actual document ID\\n  \\n  await fetchAndActivateRemoteConfig();\\n  getRemoteConfigValue('welcome_message');\\n};\\n\\nmain().catch(console.error);\\n```\\n\\nThese examples should give you a good starting point for using Firebase in a TypeScript project. Make sure to replace placeholder values like `YOUR_API_KEY` and `DOCUMENT_ID` with actual values from your Firebase project.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\",\"hash\":\"g3UvCvjyWW/8Ner0lEPYSjYCKlzb7l9nGxi7v5mLu0s=\"}","__type__":"DOCUMENT"},"firebase/compat/storage":{"__data__":"{\"id_\":\"firebase/compat/storage\",\"metadata\":{\"name\":\"firebase/compat/storage\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"text\":\"Certainly! Below are some usage examples for Firebase in TypeScript. These examples assume that you have already set up Firebase in your project and have the necessary configurations.\\n\\n### Example 1: Initializing Firebase\\n\\n```ts\\nimport firebase from 'firebase/app';\\nimport 'firebase/auth';\\nimport 'firebase/firestore';\\nimport 'firebase/storage';\\n\\n// Your web app's Firebase configuration\\nconst firebaseConfig = {\\n  apiKey: \\\"YOUR_API_KEY\\\",\\n  authDomain: \\\"YOUR_AUTH_DOMAIN\\\",\\n  projectId: \\\"YOUR_PROJECT_ID\\\",\\n  storageBucket: \\\"YOUR_STORAGE_BUCKET\\\",\\n  messagingSenderId: \\\"YOUR_MESSAGING_SENDER_ID\\\",\\n  appId: \\\"YOUR_APP_ID\\\"\\n};\\n\\n// Initialize Firebase\\nif (!firebase.apps.length) {\\n  firebase.initializeApp(firebaseConfig);\\n} else {\\n  firebase.app(); // if already initialized, use that one\\n}\\n```\\n\\n### Example 2: Using Firestore\\n\\n```ts\\nimport firebase from 'firebase/app';\\nimport 'firebase/firestore';\\n\\nconst db = firebase.firestore();\\n\\n// Adding a document\\nconst addDocument = async () => {\\n  try {\\n    const docRef = await db.collection('users').add({\\n      firstName: 'John',\\n      lastName: 'Doe',\\n      age: 30\\n    });\\n    console.log('Document written with ID: ', docRef.id);\\n  } catch (error) {\\n    console.error('Error adding document: ', error);\\n  }\\n};\\n\\n// Reading a document\\nconst getDocument = async (docId: string) => {\\n  const docRef = db.collection('users').doc(docId);\\n  const doc = await docRef.get();\\n  if (doc.exists) {\\n    console.log('Document data:', doc.data());\\n  } else {\\n    console.log('No such document!');\\n  }\\n};\\n\\n// Updating a document\\nconst updateDocument = async (docId: string) => {\\n  const docRef = db.collection('users').doc(docId);\\n  await docRef.update({\\n    age: 31\\n  });\\n  console.log('Document updated');\\n};\\n\\n// Deleting a document\\nconst deleteDocument = async (docId: string) => {\\n  const docRef = db.collection('users').doc(docId);\\n  await docRef.delete();\\n  console.log('Document deleted');\\n};\\n```\\n\\n### Example 3: Using Firebase Authentication\\n\\n```ts\\nimport firebase from 'firebase/app';\\nimport 'firebase/auth';\\n\\n// Sign up new users\\nconst signUp = async (email: string, password: string) => {\\n  try {\\n    const userCredential = await firebase.auth().createUserWithEmailAndPassword(email, password);\\n    console.log('User signed up:', userCredential.user);\\n  } catch (error) {\\n    console.error('Error signing up:', error);\\n  }\\n};\\n\\n// Sign in existing users\\nconst signIn = async (email: string, password: string) => {\\n  try {\\n    const userCredential = await firebase.auth().signInWithEmailAndPassword(email, password);\\n    console.log('User signed in:', userCredential.user);\\n  } catch (error) {\\n    console.error('Error signing in:', error);\\n  }\\n};\\n\\n// Sign out users\\nconst signOut = async () => {\\n  try {\\n    await firebase.auth().signOut();\\n    console.log('User signed out');\\n  } catch (error) {\\n    console.error('Error signing out:', error);\\n  }\\n};\\n```\\n\\n### Example 4: Using Firebase Storage\\n\\n```ts\\nimport firebase from 'firebase/app';\\nimport 'firebase/storage';\\n\\nconst storage = firebase.storage();\\n\\n// Upload a file\\nconst uploadFile = async (file: File) => {\\n  const storageRef = storage.ref();\\n  const fileRef = storageRef.child(file.name);\\n  await fileRef.put(file);\\n  console.log('File uploaded:', file.name);\\n};\\n\\n// Download a file\\nconst downloadFile = async (fileName: string) => {\\n  const storageRef = storage.ref();\\n  const fileRef = storageRef.child(fileName);\\n  const url = await fileRef.getDownloadURL();\\n  console.log('File URL:', url);\\n};\\n\\n// Delete a file\\nconst deleteFile = async (fileName: string) => {\\n  const storageRef = storage.ref();\\n  const fileRef = storageRef.child(fileName);\\n  await fileRef.delete();\\n  console.log('File deleted:', fileName);\\n};\\n```\\n\\nThese examples cover basic operations with Firebase Firestore, Authentication, and Storage. Make sure to replace placeholder values like `YOUR_API_KEY`, `YOUR_AUTH_DOMAIN`, etc., with your actual Firebase project configuration values.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\",\"hash\":\"GCAP3grfVvUbN/ssTVru6p0w85KtfzF94QdFFW+jX3M=\"}","__type__":"DOCUMENT"}},"docstore/metadata":{"react":{"docHash":"Xa8FVhpjEOUOZedREf3qzfhatVe9lfjduD55EkiQrIo="},"react-dom":{"docHash":"SCYJ90Oz/7oPppF/JwRgyCHCgdvzfh+AtprrTkDAFqI="},"react-states":{"docHash":"M5w4zytZbxsKWHVjSaWzo+N3hkDAIAPtdCL/W9mdbC0="},"bf5f22b7-298b-44b1-af16-c21b101e8787":{"docHash":"HLy8BT+mqfudjZ4XpPr5OBSGf11IgdLmA0LlnxoJbc8=","refDocId":"react"},"b42290ee-8482-4fbc-b913-0e2fc09b1ed8":{"docHash":"3S76UOBLmfKvbUEsDEDx1HIXIXVInkEkvPaZ+jnTYf4=","refDocId":"react-dom"},"18f7c4fc-fb11-435c-917a-c73b84b5a981":{"docHash":"StA0UNGloUQIaFuyZkJkl++zsXAdrPSB7AFIxXYo5Ds=","refDocId":"react-states"},"210179f2-7e8a-4c4b-af12-27ada9edff07":{"docHash":"zpaBJjSUzQ/wjfZgvyA70ph4krMYKrmj7CytUdomBAg=","refDocId":"react-states"},"firebase":{"docHash":"pMYDu/w+xI7kwYWsQi3wbikWtJ5zF3NQ2eqaW7Q7DTc="},"firebase/analytics":{"docHash":"lC1KWdXpMXfzFiIrbmyYyWFPFSksn6WYgRk3lyeU7UI="},"firebase/app":{"docHash":"KUq5f68Cmya1Up46p05IAoWu4z5qLZSUrvR95wEufBM="},"firebase/app-check":{"docHash":"93jult+GP0WGUbpOZj0Kg4895OV0gwswUx0UCyVZ5oc="},"firebase/auth":{"docHash":"s6fhfEzyXpsdD2TBzQsG+ysTigV4ncUxJfC9ePXvksM="},"firebase/auth/cordova":{"docHash":"zW0oBH1imKTlLe3FZ0CwUdkpqx27gAiTW4OhjCD3dgE="},"firebase/auth/web-extension":{"docHash":"j7z7Gr8EACUewMqIrTeE9WLItfvXNXsIlKUrG+psCFA="},"firebase/database":{"docHash":"FnLpNRec6QsFylObiniI+5u5MS7hrHwT+LaiV8yIBmg="},"firebase/firestore":{"docHash":"cJCfDcGvX+oVLXLri1kYddNmjluZ1SkuRBWlu0rWdZY="},"firebase/firestore/lite":{"docHash":"GSem6zIhI2XF3Al8cFsdg9/9v6s9gdbZjKXLqqpvgzA="},"firebase/functions":{"docHash":"FSzXmZ3T4hdIjZmVRbcwtoh3w/6dryk+i672Rv1Q0Kk="},"firebase/installations":{"docHash":"V7e/mSElF0lBSMEXGGDph0snpJq2hPeVxBjTfn1C3L8="},"firebase/messaging":{"docHash":"ZE01zY4RCm1LBshfnVnjKOTxNA0iMAjOXJJVABZtjJM="},"firebase/messaging/sw":{"docHash":"ot7pen/eKPlT6ydvkIweaoBChR5eEX1l74X6XMqXjoc="},"firebase/performance":{"docHash":"A4kh+5bi1AB+zprPTih8iCc6jSlp6PedPgzhX40WRNg="},"firebase/remote-config":{"docHash":"95/FXAsrbavXep0xzi10AIUL2QzgkYvC8aLaZ1gOIFA="},"firebase/storage":{"docHash":"BGt51WVGiwu4BoEtwOIXehbrbK7YhE0IVghlDS6khsI="},"firebase/vertexai-preview":{"docHash":"7t9Y9ptxKk4408fYe97Nrqr3T8+GPJH5Ux26zr894Iw="},"firebase/compat/analytics":{"docHash":"8qzt6oqcxdlmoCJ9Sqjxg40B7LRdOaalWCSpyzQTOoM="},"firebase/compat/app":{"docHash":"Xyn7wd7rTpTYCrAzcUH7VqSQ3gSNxYeWKlI+WSGQRoQ="},"firebase/compat/app-check":{"docHash":"2jk/8K/mkjisVpTD+9AMQYJtSVgpvD5dmnvKP2OMV9Y="},"firebase/compat/auth":{"docHash":"uhrtI309TiPb202VQv7QZqxZS9TTtszuVWs87K23yp8="},"firebase/compat/database":{"docHash":"GG6/2vWYUcnEH2D29iacDlJa7LoWuEIJhpt7sT8fSH0="},"firebase/compat/firestore":{"docHash":"tRd7L/PYmM9jr3ca+oQElvEqoBpFnxUfrz+EBLvMdTk="},"firebase/compat/functions":{"docHash":"aq+v1jKsMRcg/rJ9A9R3uj3Lkg1ZEm8gmV8NGjGAn/Q="},"firebase/compat/installations":{"docHash":"eCGNtEhkkySwte714wY3NqPxUtLpKVucLS2AGV4nR90="},"firebase/compat/messaging":{"docHash":"JHSPK2x9m8u+0+TvQb4Wo5XcIXtHulPwdRKuzg/c8nE="},"firebase/compat/performance":{"docHash":"u14CdOfnzzikXsutxVomprGCClOACb4Ua2SbYUzfoxU="},"firebase/compat/remote-config":{"docHash":"g3UvCvjyWW/8Ner0lEPYSjYCKlzb7l9nGxi7v5mLu0s="},"firebase/compat/storage":{"docHash":"GCAP3grfVvUbN/ssTVru6p0w85KtfzF94QdFFW+jX3M="}},"docstore/ref_doc_info":{"react":{"nodeIds":["bf5f22b7-298b-44b1-af16-c21b101e8787"],"extraInfo":{}},"react-dom":{"nodeIds":["b42290ee-8482-4fbc-b913-0e2fc09b1ed8"],"extraInfo":{}},"react-states":{"nodeIds":["18f7c4fc-fb11-435c-917a-c73b84b5a981","210179f2-7e8a-4c4b-af12-27ada9edff07"],"extraInfo":{}}}}