{"docstore/data":{"ad2ae7ea-2b1a-4231-a4a5-798f99b7531b":{"indexId":"ad2ae7ea-2b1a-4231-a4a5-798f99b7531b","nodesDict":{"bf5f22b7-298b-44b1-af16-c21b101e8787":{"id_":"bf5f22b7-298b-44b1-af16-c21b101e8787","metadata":{"name":"react"},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"react","metadata":{"name":"react"},"hash":"Xa8FVhpjEOUOZedREf3qzfhatVe9lfjduD55EkiQrIo="}},"text":"Sure, here are some usage examples based on the provided README and TypeScript definition for the React library:\n\n### Example 1: Basic Counter Component\n\nThis example demonstrates a simple counter component using React's `useState` hook. ```tsx\nimport React, { useState } from 'react';\nimport { createRoot } from 'react-dom/client';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <>\n      <h1>{count}</h1>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </>\n  );\n}\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(<Counter />);\n```\n\n### Example 2: Using Context API\n\nThis example demonstrates how to use React's Context API to pass data through the component tree without having to pass props down manually at every level. ```tsx\nimport React, { createContext, useContext } from 'react';\nimport { createRoot } from 'react-dom/client';\n\nconst ThemeContext = createContext('light');\n\nfunction ThemedButton() {\n  const theme = useContext(ThemeContext);\n  return <button style={{ background: theme === 'dark' ? '#333' : '#FFF' }}>Themed Button</button>;\n}\n\nfunction App() {\n  return (\n    <ThemeContext.Provider value=\"dark\">\n      <ThemedButton />\n    </ThemeContext.Provider>\n  );\n}\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(<App />);\n```\n\n### Example 3: Using `useEffect` Hook\n\nThis example demonstrates how to use the `useEffect` hook to perform side effects in a functional component. ```tsx\nimport React, { useState, useEffect } from 'react';\nimport { createRoot } from 'react-dom/client';\n\nfunction Timer() {\n  const [seconds, setSeconds] = useState(0);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setSeconds(prevSeconds => prevSeconds + 1);\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  return <h1>{seconds} seconds have passed.</h1>;\n}\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(<Timer />);\n```\n\n### Example 4: Using `useRef` Hook\n\nThis example demonstrates how to use the `useRef` hook to access a DOM element directly. ```tsx\nimport React, { useRef } from 'react';\nimport { createRoot } from 'react-dom/client';\n\nfunction TextInputWithFocusButton() {\n  const inputEl = useRef<HTMLInputElement>(null);\n\n  const onButtonClick = () => {\n    if (inputEl.current) {\n      inputEl.current.focus();\n    }\n  };\n\n  return (\n    <>\n      <input ref={inputEl} type=\"text\" />\n      <button onClick={onButtonClick}>Focus the input</button>\n    </>\n  );\n}\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(<TextInputWithFocusButton />);\n```\n\n### Example 5: Using `useReducer` Hook\n\nThis example demonstrates how to use the `useReducer` hook for more complex state management. ```tsx\nimport React, { useReducer } from 'react';\nimport { createRoot } from 'react-dom/client';\n\ntype Action = { type: 'increment' } | { type: 'decrement' };\n\nfunction counterReducer(state: number, action: Action): number {\n  switch (action.type) {\n    case 'increment':\n      return state + 1;\n    case 'decrement':\n      return state - 1;\n    default:\n      throw new Error();\n  }\n}\n\nfunction Counter() {\n  const [count, dispatch] = useReducer(counterReducer, 0);\n\n  return (\n    <>\n      <h1>{count}</h1>\n      <button onClick={() => dispatch({ type: 'increment' })}>Increment</button>\n      <button onClick={() => dispatch({ type: 'decrement' })}>Decrement</button>\n    </>\n  );\n}\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(<Counter />);\n```\n\nThese examples cover basic usage of React hooks (`useState`, `useEffect`, `useContext`, `useRef`, `useReducer`) and the Context API, which are fundamental concepts in modern React development.","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"HLy8BT+mqfudjZ4XpPr5OBSGf11IgdLmA0LlnxoJbc8="},"b42290ee-8482-4fbc-b913-0e2fc09b1ed8":{"id_":"b42290ee-8482-4fbc-b913-0e2fc09b1ed8","metadata":{"name":"react-dom"},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"react-dom","metadata":{"name":"react-dom"},"hash":"SCYJ90Oz/7oPppF/JwRgyCHCgdvzfh+AtprrTkDAFqI="}},"text":"Sure! Here are some usage examples based on the provided README and TypeScript definitions for the `react-dom` library. ### Browser Usage Example\n\n```js\nimport { createRoot } from 'react-dom/client';\nimport React from 'react';\n\nfunction App() {\n  return <div>Hello World</div>;\n}\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(<App />);\n```\n\n### Server-Side Rendering Example\n\n```js\nimport { renderToPipeableStream } from 'react-dom/server';\nimport React from 'react';\n\nfunction App() {\n  return <div>Hello World</div>;\n}\n\nfunction handleRequest(res) {\n  const stream = renderToPipeableStream(<App />, {\n    onShellReady() {\n      res.statusCode = 200;\n      res.setHeader('Content-type', 'text/html');\n      stream.pipe(res);\n    },\n    // Add other options as needed\n  });\n}\n```\n\n### Using `createPortal`\n\n```js\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nfunction Modal({ children }) {\n  return ReactDOM.createPortal(\n    <div className=\"modal\">\n      {children}\n    </div>,\n    document.getElementById('modal-root')\n  );\n}\n\nfunction App() {\n  const [showModal, setShowModal] = useState(false);\n\n  return (\n    <div>\n      <button onClick={() => setShowModal(true)}>Show Modal</button>\n      {showModal && <Modal>Modal Content</Modal>}\n    </div>\n  );\n}\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(<App />);\n```\n\n### Using `flushSync`\n\n```js\nimport React, { useState } from 'react';\nimport { flushSync } from 'react-dom';\n\nfunction App() {\n  const [count, setCount] = useState(0);\n\n  const handleClick = () => {\n    flushSync(() => {\n      setCount(count + 1);\n    });\n    // Do something immediately after state update\n    console.log('Count updated:', count + 1);\n  };\n\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={handleClick}>Increment</button>\n    </div>\n  );\n}\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(<App />);\n```\n\n### Using `unstable_batchedUpdates`\n\n```js\nimport React, { useState } from 'react';\nimport { unstable_batchedUpdates } from 'react-dom';\n\nfunction App() {\n  const [count1, setCount1] = useState(0);\n  const [count2, setCount2] = useState(0);\n\n  const handleClick = () => {\n    unstable_batchedUpdates(() => {\n      setCount1(count1 + 1);\n      setCount2(count2 + 1);\n    });\n    // Both state updates will be batched together\n  };\n\n  return (\n    <div>\n      <p>Count1: {count1}</p>\n      <p>Count2: {count2}</p>\n      <button onClick={handleClick}>Increment Both</button>\n    </div>\n  );\n}\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(<App />);\n```\n\n### Deprecated API Usage (for reference)\n\n```js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nfunction App() {\n  return <div>Hello World</div>;\n}\n\n// Deprecated: Use createRoot instead\nReactDOM.render(<App />, document.getElementById('root'));\n\n// Deprecated: Use createRoot and root.unmount() instead\nReactDOM.unmountComponentAtNode(document.getElementById('root'));\n```\n\nThese examples cover various use cases, including client-side rendering, server-side rendering, portals, and some of the deprecated APIs. For more detailed information, you can refer to the official React documentation.","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"3S76UOBLmfKvbUEsDEDx1HIXIXVInkEkvPaZ+jnTYf4="},"18f7c4fc-fb11-435c-917a-c73b84b5a981":{"id_":"18f7c4fc-fb11-435c-917a-c73b84b5a981","metadata":{"name":"react-states"},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"react-states","metadata":{"name":"react-states"},"hash":"M5w4zytZbxsKWHVjSaWzo+N3hkDAIAPtdCL/W9mdbC0="},"NEXT":{"nodeId":"210179f2-7e8a-4c4b-af12-27ada9edff07","metadata":{"name":"react-states"},"hash":"zpaBJjSUzQ/wjfZgvyA70ph4krMYKrmj7CytUdomBAg="}},"text":"Sure! Here are some usage examples based on the provided README and TypeScript definitions of the \"react-states\" library. ### Example 1: Basic Usage with `createTransitionsHook`\n\nThis example demonstrates how to use `createTransitionsHook` to manage state transitions and effects in a React component. ```tsx\nimport React from \"react\";\nimport { createTransitionsHook } from \"react-states\";\n\ntype State =\n  | { status: \"NOT_LOADED\" }\n  | { status: \"LOADING\" }\n  | { status: \"LOADED\"; data: string }\n  | { status: \"ERROR\"; error: string };\n\ntype Action = \n  | { type: \"FETCH\" }\n  | { type: \"FETCH_SUCCESS\"; data: string }\n  | { type: \"FETCH_ERROR\"; error: string };\n\ntype Effect = { type: \"FETCH_DATA\" };\n\nconst useData = createTransitionsHook<State, Action, Effect>((transition) => ({\n  NOT_LOADED: {\n    FETCH: () =>\n      transition(\n        { status: \"LOADING\" },\n        { type: \"FETCH_DATA\" }\n      ),\n  },\n  LOADING: {\n    FETCH_SUCCESS: ({ data }) =>\n      transition({ status: \"LOADED\", data }),\n    FETCH_ERROR: ({ error }) =>\n      transition({ status: \"ERROR\", error }),\n  },\n  LOADED: {},\n  ERROR: {},\n}));\n\nconst DataComponent = () => {\n  const [state, dispatch] = useData(\n    {\n      FETCH_DATA: async () => {\n        try {\n          const newData = await Promise.resolve(\"Some data\");\n          dispatch({ type: \"FETCH_SUCCESS\", data: newData });\n        } catch (error) {\n          dispatch({ type: \"FETCH_ERROR\", error: \"Failed to fetch data\" });\n        }\n      },\n    },\n    { status: \"NOT_LOADED\" }\n  );\n\n  return (\n    <div>\n      {state.status === \"NOT_LOADED\" && (\n        <button onClick={() => dispatch({ type: \"FETCH\" })}>Load data</button>\n      )}\n      {state.status === \"LOADING\" && <p>Loading...</p>}\n      {state.status === \"LOADED\" && <p>Data: {state.data}</p>}\n      {state.status === \"ERROR\" && <p style={{ color: \"red\" }}>{state.error}</p>}\n    </div>\n  );\n};\n\nexport default DataComponent;\n```\n\n### Example 2: Using `match` for Exhaustive Matching\n\nThis example shows how to use the `match` function to render different UI based on the state. ```tsx\nimport React from \"react\";\nimport { match } from \"react-states\";\nimport { useData } from \"./useData\"; // Assuming useData is defined as in Example 1\n\nconst DataComponent = () => {\n  const [state, dispatch] = useData(\n    {\n      FETCH_DATA: async () => {\n        try {\n          const newData = await Promise.resolve(\"Some data\");\n          dispatch({ type: \"FETCH_SUCCESS\", data: newData });\n        } catch (error) {\n          dispatch({ type: \"FETCH_ERROR\", error: \"Failed to fetch data\" });\n        }\n      },\n    },\n    { status: \"NOT_LOADED\" }\n  );\n\n  return match(state, {\n    NOT_LOADED: () => (\n      <button onClick={() => dispatch({ type: \"FETCH\" })}>Load data</button>\n    ),\n    LOADING: () => <p>Loading...</p>,\n    LOADED: ({ data }) => <p>Data: {data}</p>,\n    ERROR: ({ error }) => <p style={{ color: \"red\" }}>{error}</p>,\n  });\n};\n\nexport default DataComponent;\n```\n\n### Example 3: Using `match` for Partial Matching\n\nThis example demonstrates how to use `match` with a default case for unmatched states. ```tsx\nimport React from \"react\";\nimport { match } from \"react-states\";\nimport { useData } from \"./useData\"; // Assuming useData is defined as in Example 1\n\nconst DataComponent = () => {\n  const [state, dispatch] = useData(\n    {\n      FETCH_DATA: async () => {\n        try {\n          const newData = await Promise.resolve(\"Some data\");\n          dispatch({ type: \"FETCH_SUCCESS\", data: newData });\n        } catch (error) {\n          dispatch({ type: \"FETCH_ERROR\", error: \"Failed to fetch data\" });\n        }\n      },\n    },\n    { status: \"NOT_LOADED\" }\n  );\n\n  const dataWithDefault = match(\n    state,\n    {\n      LOADED: ({ data }) => data,\n    },\n    () => \"No data yet\"\n  );\n\n  return <div>Data: {dataWithDefault}</div>;\n};\n\nexport default DataComponent;\n```\n\n### Example 4: Debugging\n\nThis example shows how to enable debugging based on the environment.","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"StA0UNGloUQIaFuyZkJkl++zsXAdrPSB7AFIxXYo5Ds="},"210179f2-7e8a-4c4b-af12-27ada9edff07":{"id_":"210179f2-7e8a-4c4b-af12-27ada9edff07","metadata":{"name":"react-states"},"excludedEmbedMetadataKeys":[],"excludedLlmMetadataKeys":[],"relationships":{"SOURCE":{"nodeId":"react-states","metadata":{"name":"react-states"},"hash":"M5w4zytZbxsKWHVjSaWzo+N3hkDAIAPtdCL/W9mdbC0="},"PREVIOUS":{"nodeId":"18f7c4fc-fb11-435c-917a-c73b84b5a981","metadata":{"name":"react-states"},"hash":"StA0UNGloUQIaFuyZkJkl++zsXAdrPSB7AFIxXYo5Ds="}},"text":"```ts\nimport { debugging } from \"react-states\";\n\ndebugging.active = Boolean(import.meta.env.DEV); // Enable debugging in development mode\n```\n\nThese examples should help you get started with the \"react-states\" library and understand how to manage state transitions and effects in a type-safe manner.","textTemplate":"","metadataSeparator":"\n","type":"TEXT","hash":"zpaBJjSUzQ/wjfZgvyA70ph4krMYKrmj7CytUdomBAg="}},"type":"simple_dict"}}}